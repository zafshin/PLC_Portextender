
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000010  08001fe4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08001fe4  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007dde  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf9  00000000  00000000  00027e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  00029a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000599  00000000  00000000  0002a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007552  00000000  00000000  0002a729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000023a8  00000000  00000000  00031c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000124c  00000000  00000000  00034024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00002c23  00000000  00000000  00035270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00037e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	08001f94 	.word	0x08001f94

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	08001f94 	.word	0x08001f94

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000228:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	2400      	movs	r4, #0
 800022c:	9404      	str	r4, [sp, #16]
 800022e:	9405      	str	r4, [sp, #20]
 8000230:	9406      	str	r4, [sp, #24]
 8000232:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000236:	699a      	ldr	r2, [r3, #24]
 8000238:	f042 0210 	orr.w	r2, r2, #16
 800023c:	619a      	str	r2, [r3, #24]
 800023e:	699a      	ldr	r2, [r3, #24]
 8000240:	f002 0210 	and.w	r2, r2, #16
 8000244:	9201      	str	r2, [sp, #4]
 8000246:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	699a      	ldr	r2, [r3, #24]
 800024a:	f042 0220 	orr.w	r2, r2, #32
 800024e:	619a      	str	r2, [r3, #24]
 8000250:	699a      	ldr	r2, [r3, #24]
 8000252:	f002 0220 	and.w	r2, r2, #32
 8000256:	9202      	str	r2, [sp, #8]
 8000258:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	699a      	ldr	r2, [r3, #24]
 800025c:	f042 0204 	orr.w	r2, r2, #4
 8000260:	619a      	str	r2, [r3, #24]
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	9303      	str	r3, [sp, #12]
 800026a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 800026c:	4d19      	ldr	r5, [pc, #100]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800026e:	4622      	mov	r2, r4
 8000270:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000274:	4628      	mov	r0, r5
 8000276:	f000 ff00 	bl	800107a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_flash_GPIO_Port, CS_flash_Pin, GPIO_PIN_RESET);
 800027a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80002d8 <MX_GPIO_Init+0xb4>
 800027e:	4622      	mov	r2, r4
 8000280:	2110      	movs	r1, #16
 8000282:	4640      	mov	r0, r8
 8000284:	f000 fef9 	bl	800107a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = G_LED_Pin|R_LED_Pin;
 8000288:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800028c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2601      	movs	r6, #1
 8000290:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	f04f 0902 	mov.w	r9, #2
 8000298:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029c:	a904      	add	r1, sp, #16
 800029e:	4628      	mov	r0, r5
 80002a0:	f000 fd30 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_flash_Pin;
 80002a4:	2710      	movs	r7, #16
 80002a6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a8:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(CS_flash_GPIO_Port, &GPIO_InitStruct);
 80002b0:	eb0d 0107 	add.w	r1, sp, r7
 80002b4:	4640      	mov	r0, r8
 80002b6:	f000 fd25 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = reset_factory_Pin;
 80002ba:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002be:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(reset_factory_GPIO_Port, &GPIO_InitStruct);
 80002c0:	eb0d 0107 	add.w	r1, sp, r7
 80002c4:	4628      	mov	r0, r5
 80002c6:	f000 fd1d 	bl	8000d04 <HAL_GPIO_Init>

}
 80002ca:	b009      	add	sp, #36	; 0x24
 80002cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40011000 	.word	0x40011000
 80002d8:	40010800 	.word	0x40010800

080002dc <set_cs_flash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_cs_flash(void) {
 80002dc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, CS_flash_Pin, GPIO_PIN_RESET); //CS LOW
 80002de:	2200      	movs	r2, #0
 80002e0:	2110      	movs	r1, #16
 80002e2:	4802      	ldr	r0, [pc, #8]	; (80002ec <set_cs_flash+0x10>)
 80002e4:	f000 fec9 	bl	800107a <HAL_GPIO_WritePin>
}
 80002e8:	bd08      	pop	{r3, pc}
 80002ea:	bf00      	nop
 80002ec:	40010800 	.word	0x40010800

080002f0 <deset_cs_flash>:

void deset_cs_flash(void) {
 80002f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, CS_flash_Pin, GPIO_PIN_SET); //CS HIGH
 80002f2:	2201      	movs	r2, #1
 80002f4:	2110      	movs	r1, #16
 80002f6:	4802      	ldr	r0, [pc, #8]	; (8000300 <deset_cs_flash+0x10>)
 80002f8:	f000 febf 	bl	800107a <HAL_GPIO_WritePin>
}
 80002fc:	bd08      	pop	{r3, pc}
 80002fe:	bf00      	nop
 8000300:	40010800 	.word	0x40010800

08000304 <spi_r>:

void spi_r(uint8_t *data, uint16_t size) {
 8000304:	b508      	push	{r3, lr}
 8000306:	460a      	mov	r2, r1
	HAL_SPI_Receive(&hspi1, data, size, HAL_MAX_DELAY);
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	4601      	mov	r1, r0
 800030e:	4802      	ldr	r0, [pc, #8]	; (8000318 <spi_r+0x14>)
 8000310:	f001 fd55 	bl	8001dbe <HAL_SPI_Receive>
}
 8000314:	bd08      	pop	{r3, pc}
 8000316:	bf00      	nop
 8000318:	2000002c 	.word	0x2000002c

0800031c <spi_w>:

void spi_w(uint8_t *b, uint16_t size) {
 800031c:	b508      	push	{r3, lr}
 800031e:	460a      	mov	r2, r1
	HAL_SPI_Transmit(&hspi1, b, size, HAL_MAX_DELAY);
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	4601      	mov	r1, r0
 8000326:	4802      	ldr	r0, [pc, #8]	; (8000330 <spi_w+0x14>)
 8000328:	f001 fb4b 	bl	80019c2 <HAL_SPI_Transmit>
}
 800032c:	bd08      	pop	{r3, pc}
 800032e:	bf00      	nop
 8000330:	2000002c 	.word	0x2000002c

08000334 <writeEnable_eflash>:
void writeEnable_eflash() {
 8000334:	b500      	push	{lr}
 8000336:	b083      	sub	sp, #12
	uint8_t frm = WRITEEN_INS;
 8000338:	2306      	movs	r3, #6
 800033a:	f88d 3007 	strb.w	r3, [sp, #7]
	set_cs_flash();
 800033e:	f7ff ffcd 	bl	80002dc <set_cs_flash>
	spi_w(&frm, 1);
 8000342:	2101      	movs	r1, #1
 8000344:	f10d 0007 	add.w	r0, sp, #7
 8000348:	f7ff ffe8 	bl	800031c <spi_w>
	deset_cs_flash();
 800034c:	f7ff ffd0 	bl	80002f0 <deset_cs_flash>
}
 8000350:	b003      	add	sp, #12
 8000352:	f85d fb04 	ldr.w	pc, [sp], #4

08000356 <check_eflash_status>:
uint8_t check_eflash_status() {
 8000356:	b500      	push	{lr}
 8000358:	b083      	sub	sp, #12
	set_cs_flash();
 800035a:	f7ff ffbf 	bl	80002dc <set_cs_flash>
	uint8_t frm = 0x05;
 800035e:	2305      	movs	r3, #5
 8000360:	f88d 3007 	strb.w	r3, [sp, #7]
	spi_w(&frm, 1);
 8000364:	2101      	movs	r1, #1
 8000366:	f10d 0007 	add.w	r0, sp, #7
 800036a:	f7ff ffd7 	bl	800031c <spi_w>
	uint8_t status = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	f88d 3006 	strb.w	r3, [sp, #6]
	spi_r(&status, 1);
 8000374:	2101      	movs	r1, #1
 8000376:	f10d 0006 	add.w	r0, sp, #6
 800037a:	f7ff ffc3 	bl	8000304 <spi_r>
	deset_cs_flash();
 800037e:	f7ff ffb7 	bl	80002f0 <deset_cs_flash>
	return (status & 0x01);
 8000382:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8000386:	f000 0001 	and.w	r0, r0, #1
 800038a:	b003      	add	sp, #12
 800038c:	f85d fb04 	ldr.w	pc, [sp], #4

08000390 <waitforeflash>:
void waitforeflash() {
 8000390:	b538      	push	{r3, r4, r5, lr}
	int trys = 0;
	uint8_t stats = check_eflash_status();
 8000392:	f7ff ffe0 	bl	8000356 <check_eflash_status>
 8000396:	4604      	mov	r4, r0
	int trys = 0;
 8000398:	2500      	movs	r5, #0
	while (stats != 0) {
 800039a:	e000      	b.n	800039e <waitforeflash+0xe>

		if (trys > 100) {
			writeEnable_eflash();
			trys = 0;
		}
		trys++;
 800039c:	3501      	adds	r5, #1
	while (stats != 0) {
 800039e:	b15c      	cbz	r4, 80003b8 <waitforeflash+0x28>
		HAL_Delay(1);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 fad9 	bl	8000958 <HAL_Delay>
		stats = check_eflash_status();
 80003a6:	f7ff ffd6 	bl	8000356 <check_eflash_status>
 80003aa:	4604      	mov	r4, r0
		if (trys > 100) {
 80003ac:	2d64      	cmp	r5, #100	; 0x64
 80003ae:	ddf5      	ble.n	800039c <waitforeflash+0xc>
			writeEnable_eflash();
 80003b0:	f7ff ffc0 	bl	8000334 <writeEnable_eflash>
			trys = 0;
 80003b4:	2500      	movs	r5, #0
 80003b6:	e7f1      	b.n	800039c <waitforeflash+0xc>
	}
}
 80003b8:	bd38      	pop	{r3, r4, r5, pc}

080003ba <read_eflash>:
void read_eflash(uint8_t *data, uint32_t *address, uint8_t ins, uint16_t size) {
 80003ba:	b530      	push	{r4, r5, lr}
 80003bc:	b083      	sub	sp, #12
 80003be:	4604      	mov	r4, r0
 80003c0:	461d      	mov	r5, r3
	uint8_t *addr16 = ((uint8_t*) address) + 2;
	uint8_t *addr8 = ((uint8_t*) address) + 1;
	uint8_t *addr0 = ((uint8_t*) address);
	uint8_t frm[4] = { ins, *addr16, *addr8, *addr0 };
 80003c2:	f88d 2004 	strb.w	r2, [sp, #4]
 80003c6:	788b      	ldrb	r3, [r1, #2]
 80003c8:	f88d 3005 	strb.w	r3, [sp, #5]
 80003cc:	784b      	ldrb	r3, [r1, #1]
 80003ce:	f88d 3006 	strb.w	r3, [sp, #6]
 80003d2:	780b      	ldrb	r3, [r1, #0]
 80003d4:	f88d 3007 	strb.w	r3, [sp, #7]
	set_cs_flash();
 80003d8:	f7ff ff80 	bl	80002dc <set_cs_flash>
	spi_w((uint8_t*) &frm, 4);
 80003dc:	2104      	movs	r1, #4
 80003de:	eb0d 0001 	add.w	r0, sp, r1
 80003e2:	f7ff ff9b 	bl	800031c <spi_w>
	spi_r(data, size);
 80003e6:	4629      	mov	r1, r5
 80003e8:	4620      	mov	r0, r4
 80003ea:	f7ff ff8b 	bl	8000304 <spi_r>
	deset_cs_flash();
 80003ee:	f7ff ff7f 	bl	80002f0 <deset_cs_flash>
}
 80003f2:	b003      	add	sp, #12
 80003f4:	bd30      	pop	{r4, r5, pc}

080003f6 <Erase_eflash_sectors>:
	writeEnable_eflash();
	set_cs_flash();
	spi_w((uint8_t*) &buff, 260);
	deset_cs_flash();
}
void Erase_eflash_sectors(uint32_t *from_address, uint32_t *to_address) {
 80003f6:	b530      	push	{r4, r5, lr}
 80003f8:	b083      	sub	sp, #12
 80003fa:	460d      	mov	r5, r1
	uint32_t address = *from_address;
 80003fc:	6804      	ldr	r4, [r0, #0]
	while (1) {
		uint8_t *addr16 = ((uint8_t*) &address) + 2;
		uint8_t *addr8 = ((uint8_t*) &address) + 1;
		uint8_t *addr0 = ((uint8_t*) &address);
		uint8_t frm[4] = { 0x20, *addr16, *addr8, *addr0 };
 80003fe:	2320      	movs	r3, #32
 8000400:	f88d 3004 	strb.w	r3, [sp, #4]
 8000404:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8000408:	f88d 3005 	strb.w	r3, [sp, #5]
 800040c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8000410:	f88d 3006 	strb.w	r3, [sp, #6]
 8000414:	f88d 4007 	strb.w	r4, [sp, #7]
		writeEnable_eflash();
 8000418:	f7ff ff8c 	bl	8000334 <writeEnable_eflash>
		set_cs_flash();
 800041c:	f7ff ff5e 	bl	80002dc <set_cs_flash>
		spi_w((uint8_t*) &frm, 4);
 8000420:	2104      	movs	r1, #4
 8000422:	eb0d 0001 	add.w	r0, sp, r1
 8000426:	f7ff ff79 	bl	800031c <spi_w>
		deset_cs_flash();
 800042a:	f7ff ff61 	bl	80002f0 <deset_cs_flash>
		waitforeflash();
 800042e:	f7ff ffaf 	bl	8000390 <waitforeflash>
		if ((*to_address <= (address + 4096)))
 8000432:	682b      	ldr	r3, [r5, #0]
 8000434:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8000438:	42a3      	cmp	r3, r4
 800043a:	d8e0      	bhi.n	80003fe <Erase_eflash_sectors+0x8>
			break;
		address += 4096;
	}
}
 800043c:	b003      	add	sp, #12
 800043e:	bd30      	pop	{r4, r5, pc}

08000440 <erase>:
		return 1;
	else
		return 0;
}
//erase address
uint32_t erase(uint32_t *addr, uint8_t np) {
 8000440:	b500      	push	{lr}
 8000442:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000444:	2300      	movs	r3, #0
 8000446:	9302      	str	r3, [sp, #8]
	eraseInit.PageAddress = *addr;
 8000448:	6802      	ldr	r2, [r0, #0]
 800044a:	9204      	str	r2, [sp, #16]
	eraseInit.NbPages = np;
 800044c:	9105      	str	r1, [sp, #20]
	uint32_t sectorError = 0;
 800044e:	9301      	str	r3, [sp, #4]
	HAL_FLASHEx_Erase(&eraseInit, &sectorError);
 8000450:	a901      	add	r1, sp, #4
 8000452:	a802      	add	r0, sp, #8
 8000454:	f000 fc04 	bl	8000c60 <HAL_FLASHEx_Erase>
	return sectorError;
}
 8000458:	9801      	ldr	r0, [sp, #4]
 800045a:	b007      	add	sp, #28
 800045c:	f85d fb04 	ldr.w	pc, [sp], #4

08000460 <flashPage>:
//flashing
void flashPage(uint32_t *addr, uint8_t *data) {
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	4606      	mov	r6, r0
 8000464:	460d      	mov	r5, r1
	// Write the data into the Flash memory
	for (int i = 0; i < 256; i += 2) {
 8000466:	2400      	movs	r4, #0
 8000468:	e00b      	b.n	8000482 <flashPage+0x22>
		uint16_t halfword = (*(data + i + 1) << 8) | *(data + i);
 800046a:	1c63      	adds	r3, r4, #1
 800046c:	5cea      	ldrb	r2, [r5, r3]
 800046e:	5d2b      	ldrb	r3, [r5, r4]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, *addr + i, halfword);
 8000470:	6831      	ldr	r1, [r6, #0]
 8000472:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8000476:	2300      	movs	r3, #0
 8000478:	4421      	add	r1, r4
 800047a:	2001      	movs	r0, #1
 800047c:	f000 fb7c 	bl	8000b78 <HAL_FLASH_Program>
	for (int i = 0; i < 256; i += 2) {
 8000480:	3402      	adds	r4, #2
 8000482:	2cff      	cmp	r4, #255	; 0xff
 8000484:	ddf1      	ble.n	800046a <flashPage+0xa>
	}
}
 8000486:	bd70      	pop	{r4, r5, r6, pc}

08000488 <checkUpdateFlags>:


uint8_t checkUpdateFlags() {
 8000488:	b500      	push	{lr}
 800048a:	b083      	sub	sp, #12
	uint8_t data = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t addr = UPDATE_FLAG_ADDR;
 8000492:	f44f 237f 	mov.w	r3, #1044480	; 0xff000
 8000496:	9300      	str	r3, [sp, #0]
	uint8_t flag = READ_INS;
	read_eflash((uint8_t*) &data, &addr, flag, 1);
 8000498:	2301      	movs	r3, #1
 800049a:	2203      	movs	r2, #3
 800049c:	4669      	mov	r1, sp
 800049e:	f10d 0007 	add.w	r0, sp, #7
 80004a2:	f7ff ff8a 	bl	80003ba <read_eflash>
	return data;
}
 80004a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80004aa:	b003      	add	sp, #12
 80004ac:	f85d fb04 	ldr.w	pc, [sp], #4

080004b0 <EraseUpdateFlags>:
uint8_t EraseUpdateFlags() {
 80004b0:	b500      	push	{lr}
 80004b2:	b083      	sub	sp, #12
	uint32_t addr = UPDATE_FLAG_ADDR;
 80004b4:	f44f 237f 	mov.w	r3, #1044480	; 0xff000
 80004b8:	9301      	str	r3, [sp, #4]
	uint32_t toaddr = UPDATE_FLAG_ADDR + 50;
 80004ba:	3332      	adds	r3, #50	; 0x32
 80004bc:	9300      	str	r3, [sp, #0]
	Erase_eflash_sectors(&addr, &toaddr);
 80004be:	4669      	mov	r1, sp
 80004c0:	a801      	add	r0, sp, #4
 80004c2:	f7ff ff98 	bl	80003f6 <Erase_eflash_sectors>
	return 0;
}
 80004c6:	2000      	movs	r0, #0
 80004c8:	b003      	add	sp, #12
 80004ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004d0 <ResetFactory>:
//Reset factory
void ResetFactory(){
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	b083      	sub	sp, #12
	char f = 0;
	HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004da:	4828      	ldr	r0, [pc, #160]	; (800057c <ResetFactory+0xac>)
 80004dc:	f000 fdcd 	bl	800107a <HAL_GPIO_WritePin>
	char f = 0;
 80004e0:	2400      	movs	r4, #0
	while (HAL_GPIO_ReadPin(reset_factory_GPIO_Port, reset_factory_Pin)) {
 80004e2:	2110      	movs	r1, #16
 80004e4:	4825      	ldr	r0, [pc, #148]	; (800057c <ResetFactory+0xac>)
 80004e6:	f000 fdc1 	bl	800106c <HAL_GPIO_ReadPin>
 80004ea:	b3c0      	cbz	r0, 800055e <ResetFactory+0x8e>
		HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 80004ec:	4d23      	ldr	r5, [pc, #140]	; (800057c <ResetFactory+0xac>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f4:	4628      	mov	r0, r5
 80004f6:	f000 fdc0 	bl	800107a <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80004fa:	20c8      	movs	r0, #200	; 0xc8
 80004fc:	f000 fa2c 	bl	8000958 <HAL_Delay>
		HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000506:	4628      	mov	r0, r5
 8000508:	f000 fdb7 	bl	800107a <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800050c:	20c8      	movs	r0, #200	; 0xc8
 800050e:	f000 fa23 	bl	8000958 <HAL_Delay>
			f++;
 8000512:	3401      	adds	r4, #1
 8000514:	b2e4      	uxtb	r4, r4
			if(f >= 25){
 8000516:	2c18      	cmp	r4, #24
 8000518:	d9e3      	bls.n	80004e2 <ResetFactory+0x12>
				uint32_t addr = SETTINGS_ADDR;
 800051a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051e:	9300      	str	r3, [sp, #0]
				uint32_t toaddr = SETTINGS_ADDR + 3000;
 8000520:	f641 33b8 	movw	r3, #7096	; 0x1bb8
 8000524:	9301      	str	r3, [sp, #4]
				Erase_eflash_sectors(&addr, &toaddr);
 8000526:	a901      	add	r1, sp, #4
 8000528:	4668      	mov	r0, sp
 800052a:	f7ff ff64 	bl	80003f6 <Erase_eflash_sectors>
				for(int i =0; i<25;i++){
 800052e:	2400      	movs	r4, #0
 8000530:	e013      	b.n	800055a <ResetFactory+0x8a>
				HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);
 8000532:	4d12      	ldr	r5, [pc, #72]	; (800057c <ResetFactory+0xac>)
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053a:	4628      	mov	r0, r5
 800053c:	f000 fd9d 	bl	800107a <HAL_GPIO_WritePin>
				HAL_Delay(20);
 8000540:	2014      	movs	r0, #20
 8000542:	f000 fa09 	bl	8000958 <HAL_Delay>
				HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	4628      	mov	r0, r5
 800054e:	f000 fd94 	bl	800107a <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8000552:	2032      	movs	r0, #50	; 0x32
 8000554:	f000 fa00 	bl	8000958 <HAL_Delay>
				for(int i =0; i<25;i++){
 8000558:	3401      	adds	r4, #1
 800055a:	2c18      	cmp	r4, #24
 800055c:	dde9      	ble.n	8000532 <ResetFactory+0x62>
				}
				break;

			}
		}
	HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 800055e:	4c07      	ldr	r4, [pc, #28]	; (800057c <ResetFactory+0xac>)
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000566:	4620      	mov	r0, r4
 8000568:	f000 fd87 	bl	800107a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000572:	4620      	mov	r0, r4
 8000574:	f000 fd81 	bl	800107a <HAL_GPIO_WritePin>
}
 8000578:	b003      	add	sp, #12
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	40011000 	.word	0x40011000

08000580 <Update>:
// The update process
uint8_t Update() {
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	b0c5      	sub	sp, #276	; 0x114
	// Unlocking process of the microcontroller's flash
	__HAL_FLASH_CLEAR_FLAG(
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <Update+0x8c>)
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	60da      	str	r2, [r3, #12]
			FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR); // Clear any pending flags
	HAL_FLASH_Unlock(); // Unlock the flash
 800058a:	f000 fa9d 	bl	8000ac8 <HAL_FLASH_Unlock>
	waitforeflash();
 800058e:	f7ff feff 	bl	8000390 <waitforeflash>
	uint32_t saddr = 0x8003B00;
 8000592:	4c1f      	ldr	r4, [pc, #124]	; (8000610 <Update+0x90>)
 8000594:	9443      	str	r4, [sp, #268]	; 0x10c
	// Erase the flash
	erase(&saddr, 118);
 8000596:	2176      	movs	r1, #118	; 0x76
 8000598:	a843      	add	r0, sp, #268	; 0x10c
 800059a:	f7ff ff51 	bl	8000440 <erase>
	uint32_t addrt = UPDATE_ADDR;
 800059e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005a2:	9342      	str	r3, [sp, #264]	; 0x108
	uint32_t addrf = FLASH_ADDR;
 80005a4:	9441      	str	r4, [sp, #260]	; 0x104
	uint32_t offset = 0;
 80005a6:	2500      	movs	r5, #0
 80005a8:	e026      	b.n	80005f8 <Update+0x78>
	uint8_t data[256];
	while (1) {
		for (int i = 0; i < 256; i++) {
			// Reading 256 bytes from external flash
			read_eflash(((uint8_t*) &data) + i, &addrt, (uint8_t) READ_INS, 1);
 80005aa:	2301      	movs	r3, #1
 80005ac:	2203      	movs	r2, #3
 80005ae:	a942      	add	r1, sp, #264	; 0x108
 80005b0:	a801      	add	r0, sp, #4
 80005b2:	4420      	add	r0, r4
 80005b4:	f7ff ff01 	bl	80003ba <read_eflash>
			addrt++;
 80005b8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80005ba:	3301      	adds	r3, #1
 80005bc:	9342      	str	r3, [sp, #264]	; 0x108
		for (int i = 0; i < 256; i++) {
 80005be:	3401      	adds	r4, #1
 80005c0:	2cff      	cmp	r4, #255	; 0xff
 80005c2:	ddf2      	ble.n	80005aa <Update+0x2a>
		}
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET); //LED HIGH
 80005c4:	4c13      	ldr	r4, [pc, #76]	; (8000614 <Update+0x94>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	4620      	mov	r0, r4
 80005ce:	f000 fd54 	bl	800107a <HAL_GPIO_WritePin>
		// Write the 256 bytes into the embedded flash
		flashPage(&addrf, data);
 80005d2:	a901      	add	r1, sp, #4
 80005d4:	a841      	add	r0, sp, #260	; 0x104
 80005d6:	f7ff ff43 	bl	8000460 <flashPage>
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET); //LED HIGH
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	4620      	mov	r0, r4
 80005e2:	f000 fd4a 	bl	800107a <HAL_GPIO_WritePin>
		offset += 256;
 80005e6:	f505 7580 	add.w	r5, r5, #256	; 0x100
		addrf += 256;
 80005ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80005ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80005f0:	9341      	str	r3, [sp, #260]	; 0x104
		if (offset >= 242000)
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <Update+0x98>)
 80005f4:	429d      	cmp	r5, r3
 80005f6:	d801      	bhi.n	80005fc <Update+0x7c>
		for (int i = 0; i < 256; i++) {
 80005f8:	2400      	movs	r4, #0
 80005fa:	e7e1      	b.n	80005c0 <Update+0x40>
			break;
	}
	// Lock the flash
	HAL_FLASH_Lock();
 80005fc:	f000 fa7e 	bl	8000afc <HAL_FLASH_Lock>
	// Undo the update flag
	EraseUpdateFlags();
 8000600:	f7ff ff56 	bl	80004b0 <EraseUpdateFlags>
	return 0;
}
 8000604:	2000      	movs	r0, #0
 8000606:	b045      	add	sp, #276	; 0x114
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	40022000 	.word	0x40022000
 8000610:	08003b00 	.word	0x08003b00
 8000614:	40011000 	.word	0x40011000
 8000618:	0003b14f 	.word	0x0003b14f

0800061c <JumpToAddress>:
// Jump to ROM
typedef void (*pFunction)(void);
void JumpToAddress(uint32_t addr) {
 800061c:	b538      	push	{r3, r4, r5, lr}
 800061e:	4604      	mov	r4, r0
	uint32_t JumpAddress = *(uint32_t*) (addr + 4);
 8000620:	6845      	ldr	r5, [r0, #4]
	pFunction Jump = (pFunction) JumpAddress;
	HAL_SPI_DeInit(&hspi1);
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <JumpToAddress+0x30>)
 8000624:	f001 f9b7 	bl	8001996 <HAL_SPI_DeInit>
	HAL_RCC_DeInit();
 8000628:	f000 fd44 	bl	80010b4 <HAL_RCC_DeInit>
	HAL_DeInit();
 800062c:	f000 f93a 	bl	80008a4 <HAL_DeInit>

    // Stop refreshing the watchdog (prevent reset)
	SysTick->CTRL = 0;
 8000630:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
	SysTick->LOAD = 0;
 8000638:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 800063a:	619a      	str	r2, [r3, #24]

	SCB->VTOR = addr;
 800063c:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8000640:	609c      	str	r4, [r3, #8]
	__set_MSP(*(uint32_t*) addr);
 8000642:	6823      	ldr	r3, [r4, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000644:	f383 8808 	msr	MSP, r3
	Jump();
 8000648:	47a8      	blx	r5
}
 800064a:	bd38      	pop	{r3, r4, r5, pc}
 800064c:	2000002c 	.word	0x2000002c

08000650 <Boot>:
// Boot Process
void Boot() {
 8000650:	b508      	push	{r3, lr}
	// Check for Update
	if (checkUpdateFlags() == 0x45) {
 8000652:	f7ff ff19 	bl	8000488 <checkUpdateFlags>
 8000656:	2845      	cmp	r0, #69	; 0x45
 8000658:	d005      	beq.n	8000666 <Boot+0x16>
		Update();
	}
	// Jump to ROM
	ResetFactory();
 800065a:	f7ff ff39 	bl	80004d0 <ResetFactory>
	JumpToAddress(FLASH_ADDR);
 800065e:	4803      	ldr	r0, [pc, #12]	; (800066c <Boot+0x1c>)
 8000660:	f7ff ffdc 	bl	800061c <JumpToAddress>
}
 8000664:	bd08      	pop	{r3, pc}
		Update();
 8000666:	f7ff ff8b 	bl	8000580 <Update>
 800066a:	e7f6      	b.n	800065a <Boot+0xa>
 800066c:	08003b00 	.word	0x08003b00

08000670 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000672:	e7fe      	b.n	8000672 <Error_Handler+0x2>

08000674 <SystemClock_Config>:
{
 8000674:	b500      	push	{lr}
 8000676:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000678:	2228      	movs	r2, #40	; 0x28
 800067a:	2100      	movs	r1, #0
 800067c:	a806      	add	r0, sp, #24
 800067e:	f001 fc5d 	bl	8001f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	2300      	movs	r3, #0
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	9302      	str	r3, [sp, #8]
 8000688:	9303      	str	r3, [sp, #12]
 800068a:	9304      	str	r3, [sp, #16]
 800068c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068e:	2201      	movs	r2, #1
 8000690:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2202      	movs	r2, #2
 800069c:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006a4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	a806      	add	r0, sp, #24
 80006a8:	f000 fd7e 	bl	80011a8 <HAL_RCC_OscConfig>
 80006ac:	b980      	cbnz	r0, 80006d0 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2102      	movs	r1, #2
 80006b4:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006be:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	a801      	add	r0, sp, #4
 80006c4:	f000 ffa2 	bl	800160c <HAL_RCC_ClockConfig>
 80006c8:	b920      	cbnz	r0, 80006d4 <SystemClock_Config+0x60>
}
 80006ca:	b011      	add	sp, #68	; 0x44
 80006cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006d0:	f7ff ffce 	bl	8000670 <Error_Handler>
    Error_Handler();
 80006d4:	f7ff ffcc 	bl	8000670 <Error_Handler>

080006d8 <main>:
{
 80006d8:	b508      	push	{r3, lr}
  HAL_Init();
 80006da:	f000 f919 	bl	8000910 <HAL_Init>
	HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET); //LED HIGH
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <main+0x2c>)
 80006e6:	f000 fcc8 	bl	800107a <HAL_GPIO_WritePin>
  SystemClock_Config();
 80006ea:	f7ff ffc3 	bl	8000674 <SystemClock_Config>
  MX_GPIO_Init();
 80006ee:	f7ff fd99 	bl	8000224 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006f2:	f000 f809 	bl	8000708 <MX_SPI1_Init>
	HAL_Delay(50);
 80006f6:	2032      	movs	r0, #50	; 0x32
 80006f8:	f000 f92e 	bl	8000958 <HAL_Delay>
	Boot();
 80006fc:	f7ff ffa8 	bl	8000650 <Boot>
	while (1) {
 8000700:	e7fe      	b.n	8000700 <main+0x28>
 8000702:	bf00      	nop
 8000704:	40011000 	.word	0x40011000

08000708 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000708:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <MX_SPI1_Init+0x3c>)
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_SPI1_Init+0x40>)
 800070e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000710:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000714:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	2300      	movs	r3, #0
 8000718:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000726:	2208      	movs	r2, #8
 8000728:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000730:	230a      	movs	r3, #10
 8000732:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000734:	f001 f8d4 	bl	80018e0 <HAL_SPI_Init>
 8000738:	b900      	cbnz	r0, 800073c <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800073c:	f7ff ff98 	bl	8000670 <Error_Handler>
}
 8000740:	e7fb      	b.n	800073a <MX_SPI1_Init+0x32>
 8000742:	bf00      	nop
 8000744:	2000002c 	.word	0x2000002c
 8000748:	40013000 	.word	0x40013000

0800074c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800074c:	b510      	push	{r4, lr}
 800074e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	9303      	str	r3, [sp, #12]
 8000756:	9304      	str	r3, [sp, #16]
 8000758:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 800075a:	6802      	ldr	r2, [r0, #0]
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_SPI_MspInit+0x6c>)
 800075e:	429a      	cmp	r2, r3
 8000760:	d001      	beq.n	8000766 <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000762:	b006      	add	sp, #24
 8000764:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000766:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	699a      	ldr	r2, [r3, #24]
 8000774:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	f042 0204 	orr.w	r2, r2, #4
 8000782:	619a      	str	r2, [r3, #24]
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	4c08      	ldr	r4, [pc, #32]	; (80007bc <HAL_SPI_MspInit+0x70>)
 800079c:	a902      	add	r1, sp, #8
 800079e:	4620      	mov	r0, r4
 80007a0:	f000 fab0 	bl	8000d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	a902      	add	r1, sp, #8
 80007b0:	4620      	mov	r0, r4
 80007b2:	f000 faa7 	bl	8000d04 <HAL_GPIO_Init>
}
 80007b6:	e7d4      	b.n	8000762 <HAL_SPI_MspInit+0x16>
 80007b8:	40013000 	.word	0x40013000
 80007bc:	40010800 	.word	0x40010800

080007c0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80007c0:	b508      	push	{r3, lr}

  if(spiHandle->Instance==SPI1)
 80007c2:	6802      	ldr	r2, [r0, #0]
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_SPI_MspDeInit+0x20>)
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d000      	beq.n	80007cc <HAL_SPI_MspDeInit+0xc>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80007ca:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI1_CLK_DISABLE();
 80007cc:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <HAL_SPI_MspDeInit+0x24>)
 80007ce:	6993      	ldr	r3, [r2, #24]
 80007d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007d4:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80007d6:	21e0      	movs	r1, #224	; 0xe0
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <HAL_SPI_MspDeInit+0x28>)
 80007da:	f000 fbb3 	bl	8000f44 <HAL_GPIO_DeInit>
}
 80007de:	e7f4      	b.n	80007ca <HAL_SPI_MspDeInit+0xa>
 80007e0:	40013000 	.word	0x40013000
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_MspInit+0x2c>)
 80007f0:	699a      	ldr	r2, [r3, #24]
 80007f2:	f042 0201 	orr.w	r2, r2, #1
 80007f6:	619a      	str	r2, [r3, #24]
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	f002 0201 	and.w	r2, r2, #1
 80007fe:	9200      	str	r2, [sp, #0]
 8000800:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	69da      	ldr	r2, [r3, #28]
 8000804:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000808:	61da      	str	r2, [r3, #28]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	b002      	add	sp, #8
 8000816:	4770      	bx	lr
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler>

0800081e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler>

08000820 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler>

08000822 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler>

08000824 <UsageFault_Handler>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000828:	4905      	ldr	r1, [pc, #20]	; (8000840 <UsageFault_Handler+0x1c>)
 800082a:	68ca      	ldr	r2, [r1, #12]
 800082c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <UsageFault_Handler+0x20>)
 8000832:	4313      	orrs	r3, r2
 8000834:	60cb      	str	r3, [r1, #12]
 8000836:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800083a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800083c:	e7fd      	b.n	800083a <UsageFault_Handler+0x16>
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00
 8000844:	05fa0004 	.word	0x05fa0004

08000848 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f870 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bd08      	pop	{r3, pc}

08000856 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000856:	4770      	bx	lr

08000858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000858:	f7ff fffd 	bl	8000856 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800085e:	490c      	ldr	r1, [pc, #48]	; (8000890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000874:	4c09      	ldr	r4, [pc, #36]	; (800089c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000882:	f001 fb63 	bl	8001f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000886:	f7ff ff27 	bl	80006d8 <main>
  bx lr
 800088a:	4770      	bx	lr
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000894:	08001fd8 	.word	0x08001fd8
  ldr r2, =_sbss
 8000898:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800089c:	200000a8 	.word	0x200000a8

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>

080008a2 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80008a2:	4770      	bx	lr

080008a4 <HAL_DeInit>:
{
 80008a4:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_DeInit+0x1c>)
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ac:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80008ae:	2400      	movs	r4, #0
 80008b0:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 80008b2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80008b4:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 80008b6:	f7ff fff4 	bl	80008a2 <HAL_MspDeInit>
}
 80008ba:	4620      	mov	r0, r4
 80008bc:	bd10      	pop	{r4, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b510      	push	{r4, lr}
 80008c6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_InitTick+0x40>)
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008d4:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <HAL_InitTick+0x44>)
 80008d6:	6810      	ldr	r0, [r2, #0]
 80008d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80008dc:	f000 f89a 	bl	8000a14 <HAL_SYSTICK_Config>
 80008e0:	b968      	cbnz	r0, 80008fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	2c0f      	cmp	r4, #15
 80008e4:	d901      	bls.n	80008ea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80008e6:	2001      	movs	r0, #1
 80008e8:	e00a      	b.n	8000900 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ea:	2200      	movs	r2, #0
 80008ec:	4621      	mov	r1, r4
 80008ee:	f04f 30ff 	mov.w	r0, #4294967295
 80008f2:	f000 f857 	bl	80009a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_InitTick+0x48>)
 80008f8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2000      	movs	r0, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80008fe:	2001      	movs	r0, #1
}
 8000900:	bd10      	pop	{r4, pc}
 8000902:	bf00      	nop
 8000904:	20000004 	.word	0x20000004
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_Init>:
{
 8000910:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x20>)
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f82f 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000922:	200f      	movs	r0, #15
 8000924:	f7ff ffce 	bl	80008c4 <HAL_InitTick>
  HAL_MspInit();
 8000928:	f7ff ff60 	bl	80007ec <HAL_MspInit>
}
 800092c:	2000      	movs	r0, #0
 800092e:	bd08      	pop	{r3, pc}
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000934:	4a03      	ldr	r2, [pc, #12]	; (8000944 <HAL_IncTick+0x10>)
 8000936:	6811      	ldr	r1, [r2, #0]
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_IncTick+0x14>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	440b      	add	r3, r1
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000084 	.word	0x20000084
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800094c:	4b01      	ldr	r3, [pc, #4]	; (8000954 <HAL_GetTick+0x8>)
 800094e:	6818      	ldr	r0, [r3, #0]
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000084 	.word	0x20000084

08000958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff fff6 	bl	800094c <HAL_GetTick>
 8000960:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000966:	d002      	beq.n	800096e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <HAL_Delay+0x24>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096e:	f7ff ffed 	bl	800094c <HAL_GetTick>
 8000972:	1b40      	subs	r0, r0, r5
 8000974:	42a0      	cmp	r0, r4
 8000976:	d3fa      	bcc.n	800096e <HAL_Delay+0x16>
  {
  }
}
 8000978:	bd38      	pop	{r3, r4, r5, pc}
 800097a:	bf00      	nop
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000982:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000984:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000988:	041b      	lsls	r3, r3, #16
 800098a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800098c:	0200      	lsls	r0, r0, #8
 800098e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000992:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800099c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_NVIC_SetPriority+0x68>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ae:	f1c3 0c07 	rsb	ip, r3, #7
 80009b2:	f1bc 0f04 	cmp.w	ip, #4
 80009b6:	bf28      	it	cs
 80009b8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009bc:	f103 0e04 	add.w	lr, r3, #4
 80009c0:	f1be 0f06 	cmp.w	lr, #6
 80009c4:	d918      	bls.n	80009f8 <HAL_NVIC_SetPriority+0x54>
 80009c6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 3eff 	mov.w	lr, #4294967295
 80009cc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80009d0:	ea21 010c 	bic.w	r1, r1, ip
 80009d4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d6:	fa0e fe03 	lsl.w	lr, lr, r3
 80009da:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009de:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80009e0:	2800      	cmp	r0, #0
 80009e2:	db0b      	blt.n	80009fc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009f0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009f4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f8:	2300      	movs	r3, #0
 80009fa:	e7e5      	b.n	80009c8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	f000 000f 	and.w	r0, r0, #15
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <HAL_NVIC_SetPriority+0x6c>)
 8000a06:	541a      	strb	r2, [r3, r0]
 8000a08:	e7f4      	b.n	80009f4 <HAL_NVIC_SetPriority+0x50>
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	e000ed14 	.word	0xe000ed14

08000a14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	3801      	subs	r0, #1
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d20b      	bcs.n	8000a34 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a20:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <HAL_SYSTICK_Config+0x24>)
 8000a24:	21f0      	movs	r1, #240	; 0xf0
 8000a26:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	2207      	movs	r2, #7
 8000a30:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a32:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <FLASH_Program_HalfWord+0x14>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <FLASH_Program_HalfWord+0x18>)
 8000a44:	6913      	ldr	r3, [r2, #16]
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000a4c:	8001      	strh	r1, [r0, #0]
}
 8000a4e:	4770      	bx	lr
 8000a50:	20000088 	.word	0x20000088
 8000a54:	40022000 	.word	0x40022000

08000a58 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <FLASH_SetErrorCode+0x68>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	f013 0310 	ands.w	r3, r3, #16
 8000a60:	d005      	beq.n	8000a6e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <FLASH_SetErrorCode+0x6c>)
 8000a64:	69d3      	ldr	r3, [r2, #28]
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000a6c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <FLASH_SetErrorCode+0x68>)
 8000a70:	68d2      	ldr	r2, [r2, #12]
 8000a72:	f012 0f04 	tst.w	r2, #4
 8000a76:	d006      	beq.n	8000a86 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a78:	4912      	ldr	r1, [pc, #72]	; (8000ac4 <FLASH_SetErrorCode+0x6c>)
 8000a7a:	69ca      	ldr	r2, [r1, #28]
 8000a7c:	f042 0201 	orr.w	r2, r2, #1
 8000a80:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000a82:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <FLASH_SetErrorCode+0x68>)
 8000a88:	69d2      	ldr	r2, [r2, #28]
 8000a8a:	f012 0f01 	tst.w	r2, #1
 8000a8e:	d009      	beq.n	8000aa4 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <FLASH_SetErrorCode+0x6c>)
 8000a92:	69ca      	ldr	r2, [r1, #28]
 8000a94:	f042 0204 	orr.w	r2, r2, #4
 8000a98:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a9a:	4909      	ldr	r1, [pc, #36]	; (8000ac0 <FLASH_SetErrorCode+0x68>)
 8000a9c:	69ca      	ldr	r2, [r1, #28]
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000aa4:	f240 1201 	movw	r2, #257	; 0x101
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d002      	beq.n	8000ab2 <FLASH_SetErrorCode+0x5a>
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <FLASH_SetErrorCode+0x68>)
 8000aae:	60d3      	str	r3, [r2, #12]
}  
 8000ab0:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ab2:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <FLASH_SetErrorCode+0x68>)
 8000ab4:	69d3      	ldr	r3, [r2, #28]
 8000ab6:	f023 0301 	bic.w	r3, r3, #1
 8000aba:	61d3      	str	r3, [r2, #28]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40022000 	.word	0x40022000
 8000ac4:	20000088 	.word	0x20000088

08000ac8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_FLASH_Unlock+0x2c>)
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ad0:	d00b      	beq.n	8000aea <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_FLASH_Unlock+0x2c>)
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_FLASH_Unlock+0x30>)
 8000ad6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ad8:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000adc:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ae4:	d103      	bne.n	8000aee <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	2000      	movs	r0, #0
 8000aec:	4770      	bx	lr
      status = HAL_ERROR;
 8000aee:	2001      	movs	r0, #1
}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40022000 	.word	0x40022000
 8000af8:	45670123 	.word	0x45670123

08000afc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_FLASH_Lock+0x10>)
 8000afe:	6913      	ldr	r3, [r2, #16]
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6113      	str	r3, [r2, #16]
}
 8000b06:	2000      	movs	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <FLASH_WaitForLastOperation>:
{
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff ff1a 	bl	800094c <HAL_GetTick>
 8000b18:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <FLASH_WaitForLastOperation+0x64>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f013 0f01 	tst.w	r3, #1
 8000b22:	d00a      	beq.n	8000b3a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000b24:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b28:	d0f7      	beq.n	8000b1a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b2a:	b124      	cbz	r4, 8000b36 <FLASH_WaitForLastOperation+0x26>
 8000b2c:	f7ff ff0e 	bl	800094c <HAL_GetTick>
 8000b30:	1b40      	subs	r0, r0, r5
 8000b32:	42a0      	cmp	r0, r4
 8000b34:	d9f1      	bls.n	8000b1a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000b36:	2003      	movs	r0, #3
 8000b38:	e01b      	b.n	8000b72 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <FLASH_WaitForLastOperation+0x64>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	f013 0f20 	tst.w	r3, #32
 8000b42:	d002      	beq.n	8000b4a <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <FLASH_WaitForLastOperation+0x64>)
 8000b46:	2220      	movs	r2, #32
 8000b48:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <FLASH_WaitForLastOperation+0x64>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	f013 0f10 	tst.w	r3, #16
 8000b52:	d10b      	bne.n	8000b6c <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <FLASH_WaitForLastOperation+0x64>)
 8000b56:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b58:	f013 0f01 	tst.w	r3, #1
 8000b5c:	d106      	bne.n	8000b6c <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <FLASH_WaitForLastOperation+0x64>)
 8000b60:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b62:	f013 0f04 	tst.w	r3, #4
 8000b66:	d101      	bne.n	8000b6c <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e002      	b.n	8000b72 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8000b6c:	f7ff ff74 	bl	8000a58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b70:	2001      	movs	r0, #1
}
 8000b72:	bd38      	pop	{r3, r4, r5, pc}
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_FLASH_Program>:
{
 8000b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b7c:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <HAL_FLASH_Program+0x98>)
 8000b80:	7e1b      	ldrb	r3, [r3, #24]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d041      	beq.n	8000c0a <HAL_FLASH_Program+0x92>
 8000b86:	4604      	mov	r4, r0
 8000b88:	460f      	mov	r7, r1
 8000b8a:	4690      	mov	r8, r2
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_FLASH_Program+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b96:	f7ff ffbb 	bl	8000b10 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	bb78      	cbnz	r0, 8000bfe <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b9e:	2c01      	cmp	r4, #1
 8000ba0:	d008      	beq.n	8000bb4 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ba2:	2c02      	cmp	r4, #2
 8000ba4:	d003      	beq.n	8000bae <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 8000ba6:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000baa:	461c      	mov	r4, r3
 8000bac:	e007      	b.n	8000bbe <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 8000bae:	f04f 0902 	mov.w	r9, #2
 8000bb2:	e7fa      	b.n	8000baa <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000bb4:	f04f 0901 	mov.w	r9, #1
 8000bb8:	e7f7      	b.n	8000baa <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 8000bba:	3401      	adds	r4, #1
 8000bbc:	b2e4      	uxtb	r4, r4
 8000bbe:	454c      	cmp	r4, r9
 8000bc0:	d21d      	bcs.n	8000bfe <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bc2:	0121      	lsls	r1, r4, #4
 8000bc4:	f1c1 0220 	rsb	r2, r1, #32
 8000bc8:	f1a1 0320 	sub.w	r3, r1, #32
 8000bcc:	fa28 f101 	lsr.w	r1, r8, r1
 8000bd0:	fa06 f202 	lsl.w	r2, r6, r2
 8000bd4:	4311      	orrs	r1, r2
 8000bd6:	fa26 f303 	lsr.w	r3, r6, r3
 8000bda:	4319      	orrs	r1, r3
 8000bdc:	b289      	uxth	r1, r1
 8000bde:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000be2:	f7ff ff2b 	bl	8000a3c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000be6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bea:	f7ff ff91 	bl	8000b10 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_FLASH_Program+0x9c>)
 8000bf0:	691d      	ldr	r5, [r3, #16]
 8000bf2:	f025 0501 	bic.w	r5, r5, #1
 8000bf6:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d0dd      	beq.n	8000bba <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_FLASH_Program+0x98>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	7611      	strb	r1, [r2, #24]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e7fa      	b.n	8000c04 <HAL_FLASH_Program+0x8c>
 8000c0e:	bf00      	nop
 8000c10:	20000088 	.word	0x20000088
 8000c14:	40022000 	.word	0x40022000

08000c18 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <FLASH_MassErase+0x1c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <FLASH_MassErase+0x20>)
 8000c20:	691a      	ldr	r2, [r3, #16]
 8000c22:	f042 0204 	orr.w	r2, r2, #4
 8000c26:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c2e:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000088 	.word	0x20000088
 8000c38:	40022000 	.word	0x40022000

08000c3c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <FLASH_PageErase+0x1c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <FLASH_PageErase+0x20>)
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	f042 0202 	orr.w	r2, r2, #2
 8000c4a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c4c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c54:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c56:	4770      	bx	lr
 8000c58:	20000088 	.word	0x20000088
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_FLASHEx_Erase+0x9c>)
 8000c62:	7e1b      	ldrb	r3, [r3, #24]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d046      	beq.n	8000cf6 <HAL_FLASHEx_Erase+0x96>
{
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_FLASHEx_Erase+0x9c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c74:	6803      	ldr	r3, [r0, #0]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d020      	beq.n	8000cbc <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c7e:	f7ff ff47 	bl	8000b10 <FLASH_WaitForLastOperation>
 8000c82:	bb90      	cbnz	r0, 8000cea <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000c8a:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c8c:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c8e:	68ea      	ldr	r2, [r5, #12]
 8000c90:	68ab      	ldr	r3, [r5, #8]
 8000c92:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d928      	bls.n	8000cec <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff ffce 	bl	8000c3c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ca0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ca4:	f7ff ff34 	bl	8000b10 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <HAL_FLASHEx_Erase+0xa0>)
 8000caa:	6913      	ldr	r3, [r2, #16]
 8000cac:	f023 0302 	bic.w	r3, r3, #2
 8000cb0:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	b9b8      	cbnz	r0, 8000ce6 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8000cb6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8000cba:	e7e8      	b.n	8000c8e <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cc0:	f7ff ff26 	bl	8000b10 <FLASH_WaitForLastOperation>
 8000cc4:	b108      	cbz	r0, 8000cca <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	e010      	b.n	8000cec <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff ffa4 	bl	8000c18 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cd4:	f7ff ff1c 	bl	8000b10 <FLASH_WaitForLastOperation>
 8000cd8:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_FLASHEx_Erase+0xa0>)
 8000cdc:	6913      	ldr	r3, [r2, #16]
 8000cde:	f023 0304 	bic.w	r3, r3, #4
 8000ce2:	6113      	str	r3, [r2, #16]
 8000ce4:	e002      	b.n	8000cec <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8000ce6:	6034      	str	r4, [r6, #0]
            break;
 8000ce8:	e000      	b.n	8000cec <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cea:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_FLASHEx_Erase+0x9c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	761a      	strb	r2, [r3, #24]
}
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000cf6:	2102      	movs	r1, #2
}
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	4770      	bx	lr
 8000cfc:	20000088 	.word	0x20000088
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d08:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000d0a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0c:	e0b0      	b.n	8000e70 <HAL_GPIO_Init+0x16c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d0e:	4d87      	ldr	r5, [pc, #540]	; (8000f2c <HAL_GPIO_Init+0x228>)
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d010      	beq.n	8000d36 <HAL_GPIO_Init+0x32>
 8000d14:	d907      	bls.n	8000d26 <HAL_GPIO_Init+0x22>
 8000d16:	4d86      	ldr	r5, [pc, #536]	; (8000f30 <HAL_GPIO_Init+0x22c>)
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	d00c      	beq.n	8000d36 <HAL_GPIO_Init+0x32>
 8000d1c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	d008      	beq.n	8000d36 <HAL_GPIO_Init+0x32>
 8000d24:	e013      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
 8000d26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000d2a:	42ab      	cmp	r3, r5
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x32>
 8000d2e:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d107      	bne.n	8000d46 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d36:	688b      	ldr	r3, [r1, #8]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d062      	beq.n	8000e02 <HAL_GPIO_Init+0xfe>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d05b      	beq.n	8000df8 <HAL_GPIO_Init+0xf4>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000d40:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d42:	2408      	movs	r4, #8
 8000d44:	e003      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000d46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000d4a:	42ab      	cmp	r3, r5
 8000d4c:	d0f3      	beq.n	8000d36 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d4e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000d52:	d858      	bhi.n	8000e06 <HAL_GPIO_Init+0x102>
 8000d54:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d56:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000d5a:	d856      	bhi.n	8000e0a <HAL_GPIO_Init+0x106>
 8000d5c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d60:	6833      	ldr	r3, [r6, #0]
 8000d62:	250f      	movs	r5, #15
 8000d64:	4095      	lsls	r5, r2
 8000d66:	ea23 0305 	bic.w	r3, r3, r5
 8000d6a:	fa04 f202 	lsl.w	r2, r4, r2
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d72:	684b      	ldr	r3, [r1, #4]
 8000d74:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d78:	d078      	beq.n	8000e6c <HAL_GPIO_Init+0x168>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b6e      	ldr	r3, [pc, #440]	; (8000f34 <HAL_GPIO_Init+0x230>)
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	619a      	str	r2, [r3, #24]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000d92:	1c95      	adds	r5, r2, #2
 8000d94:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <HAL_GPIO_Init+0x234>)
 8000d96:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	f00c 0503 	and.w	r5, ip, #3
 8000d9e:	00ad      	lsls	r5, r5, #2
 8000da0:	230f      	movs	r3, #15
 8000da2:	40ab      	lsls	r3, r5
 8000da4:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da8:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <HAL_GPIO_Init+0x238>)
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d033      	beq.n	8000e16 <HAL_GPIO_Init+0x112>
 8000dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000db2:	4298      	cmp	r0, r3
 8000db4:	f000 8098 	beq.w	8000ee8 <HAL_GPIO_Init+0x1e4>
 8000db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f000 8095 	beq.w	8000eec <HAL_GPIO_Init+0x1e8>
 8000dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dc6:	4298      	cmp	r0, r3
 8000dc8:	f000 8092 	beq.w	8000ef0 <HAL_GPIO_Init+0x1ec>
 8000dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f000 808f 	beq.w	8000ef4 <HAL_GPIO_Init+0x1f0>
 8000dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d019      	beq.n	8000e12 <HAL_GPIO_Init+0x10e>
 8000dde:	2306      	movs	r3, #6
 8000de0:	e01a      	b.n	8000e18 <HAL_GPIO_Init+0x114>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de2:	68cc      	ldr	r4, [r1, #12]
          break;
 8000de4:	e7b3      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de6:	68cc      	ldr	r4, [r1, #12]
 8000de8:	3404      	adds	r4, #4
          break;
 8000dea:	e7b0      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dec:	68cc      	ldr	r4, [r1, #12]
 8000dee:	3408      	adds	r4, #8
          break;
 8000df0:	e7ad      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df2:	68cc      	ldr	r4, [r1, #12]
 8000df4:	340c      	adds	r4, #12
          break;
 8000df6:	e7aa      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000df8:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfa:	2408      	movs	r4, #8
 8000dfc:	e7a7      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dfe:	2400      	movs	r4, #0
 8000e00:	e7a5      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e02:	2404      	movs	r4, #4
 8000e04:	e7a3      	b.n	8000d4e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e06:	1d06      	adds	r6, r0, #4
 8000e08:	e7a5      	b.n	8000d56 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e0a:	f1ac 0208 	sub.w	r2, ip, #8
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	e7a6      	b.n	8000d60 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e12:	2305      	movs	r3, #5
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x114>
 8000e16:	2300      	movs	r3, #0
 8000e18:	40ab      	lsls	r3, r5
 8000e1a:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1c:	3202      	adds	r2, #2
 8000e1e:	4d46      	ldr	r5, [pc, #280]	; (8000f38 <HAL_GPIO_Init+0x234>)
 8000e20:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e24:	684b      	ldr	r3, [r1, #4]
 8000e26:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000e2a:	d065      	beq.n	8000ef8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e2c:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000e2e:	6893      	ldr	r3, [r2, #8]
 8000e30:	ea43 030e 	orr.w	r3, r3, lr
 8000e34:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e36:	684b      	ldr	r3, [r1, #4]
 8000e38:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000e3c:	d062      	beq.n	8000f04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4a40      	ldr	r2, [pc, #256]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000e40:	68d3      	ldr	r3, [r2, #12]
 8000e42:	ea43 030e 	orr.w	r3, r3, lr
 8000e46:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e48:	684b      	ldr	r3, [r1, #4]
 8000e4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e4e:	d05f      	beq.n	8000f10 <HAL_GPIO_Init+0x20c>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e50:	4a3b      	ldr	r2, [pc, #236]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000e52:	6853      	ldr	r3, [r2, #4]
 8000e54:	ea43 030e 	orr.w	r3, r3, lr
 8000e58:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5a:	684b      	ldr	r3, [r1, #4]
 8000e5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e60:	d05c      	beq.n	8000f1c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e62:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	ea43 030e 	orr.w	r3, r3, lr
 8000e6a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000e6c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e70:	680b      	ldr	r3, [r1, #0]
 8000e72:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000e76:	d057      	beq.n	8000f28 <HAL_GPIO_Init+0x224>
    ioposition = (0x01uL << position);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000e82:	ea32 0303 	bics.w	r3, r2, r3
 8000e86:	d1f1      	bne.n	8000e6c <HAL_GPIO_Init+0x168>
      switch (GPIO_Init->Mode)
 8000e88:	684b      	ldr	r3, [r1, #4]
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	f63f af3f 	bhi.w	8000d0e <HAL_GPIO_Init+0xa>
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	f63f af5c 	bhi.w	8000d4e <HAL_GPIO_Init+0x4a>
 8000e96:	a501      	add	r5, pc, #4	; (adr r5, 8000e9c <HAL_GPIO_Init+0x198>)
 8000e98:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000e9c:	08000d37 	.word	0x08000d37
 8000ea0:	08000de3 	.word	0x08000de3
 8000ea4:	08000ded 	.word	0x08000ded
 8000ea8:	08000dff 	.word	0x08000dff
 8000eac:	08000d4f 	.word	0x08000d4f
 8000eb0:	08000d4f 	.word	0x08000d4f
 8000eb4:	08000d4f 	.word	0x08000d4f
 8000eb8:	08000d4f 	.word	0x08000d4f
 8000ebc:	08000d4f 	.word	0x08000d4f
 8000ec0:	08000d4f 	.word	0x08000d4f
 8000ec4:	08000d4f 	.word	0x08000d4f
 8000ec8:	08000d4f 	.word	0x08000d4f
 8000ecc:	08000d4f 	.word	0x08000d4f
 8000ed0:	08000d4f 	.word	0x08000d4f
 8000ed4:	08000d4f 	.word	0x08000d4f
 8000ed8:	08000d4f 	.word	0x08000d4f
 8000edc:	08000d4f 	.word	0x08000d4f
 8000ee0:	08000de7 	.word	0x08000de7
 8000ee4:	08000df3 	.word	0x08000df3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e795      	b.n	8000e18 <HAL_GPIO_Init+0x114>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e793      	b.n	8000e18 <HAL_GPIO_Init+0x114>
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e791      	b.n	8000e18 <HAL_GPIO_Init+0x114>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e78f      	b.n	8000e18 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000efa:	6893      	ldr	r3, [r2, #8]
 8000efc:	ea23 030e 	bic.w	r3, r3, lr
 8000f00:	6093      	str	r3, [r2, #8]
 8000f02:	e798      	b.n	8000e36 <HAL_GPIO_Init+0x132>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000f06:	68d3      	ldr	r3, [r2, #12]
 8000f08:	ea23 030e 	bic.w	r3, r3, lr
 8000f0c:	60d3      	str	r3, [r2, #12]
 8000f0e:	e79b      	b.n	8000e48 <HAL_GPIO_Init+0x144>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000f12:	6853      	ldr	r3, [r2, #4]
 8000f14:	ea23 030e 	bic.w	r3, r3, lr
 8000f18:	6053      	str	r3, [r2, #4]
 8000f1a:	e79e      	b.n	8000e5a <HAL_GPIO_Init+0x156>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_GPIO_Init+0x23c>)
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	ea23 030e 	bic.w	r3, r3, lr
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e7a1      	b.n	8000e6c <HAL_GPIO_Init+0x168>
  }
}
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	10220000 	.word	0x10220000
 8000f30:	10310000 	.word	0x10310000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8000f44:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000f46:	e081      	b.n	800104c <HAL_GPIO_DeInit+0x108>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f48:	f04f 0e05 	mov.w	lr, #5
 8000f4c:	e001      	b.n	8000f52 <HAL_GPIO_DeInit+0xe>
 8000f4e:	f04f 0e00 	mov.w	lr, #0
 8000f52:	fa0e f404 	lsl.w	r4, lr, r4
 8000f56:	4564      	cmp	r4, ip
 8000f58:	d054      	beq.n	8001004 <HAL_GPIO_DeInit+0xc0>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d86d      	bhi.n	800103a <HAL_GPIO_DeInit+0xf6>
 8000f5e:	4605      	mov	r5, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f60:	2bff      	cmp	r3, #255	; 0xff
 8000f62:	d86c      	bhi.n	800103e <HAL_GPIO_DeInit+0xfa>
 8000f64:	ea4f 0e82 	mov.w	lr, r2, lsl #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000f68:	682c      	ldr	r4, [r5, #0]
 8000f6a:	f04f 0c0f 	mov.w	ip, #15
 8000f6e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000f72:	ea24 040c 	bic.w	r4, r4, ip
 8000f76:	f04f 0c04 	mov.w	ip, #4
 8000f7a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000f7e:	ea44 040c 	orr.w	r4, r4, ip
 8000f82:	602c      	str	r4, [r5, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000f84:	68c4      	ldr	r4, [r0, #12]
 8000f86:	ea24 0303 	bic.w	r3, r4, r3
 8000f8a:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8000f8c:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8000f8e:	fa31 f302 	lsrs.w	r3, r1, r2
 8000f92:	d059      	beq.n	8001048 <HAL_GPIO_DeInit+0x104>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f94:	2301      	movs	r3, #1
 8000f96:	4093      	lsls	r3, r2
    if (iocurrent)
 8000f98:	400b      	ands	r3, r1
 8000f9a:	d0f7      	beq.n	8000f8c <HAL_GPIO_DeInit+0x48>
      tmp = AFIO->EXTICR[position >> 2u];
 8000f9c:	0897      	lsrs	r7, r2, #2
 8000f9e:	1cbd      	adds	r5, r7, #2
 8000fa0:	4c2f      	ldr	r4, [pc, #188]	; (8001060 <HAL_GPIO_DeInit+0x11c>)
 8000fa2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000fa6:	f002 0403 	and.w	r4, r2, #3
 8000faa:	00a4      	lsls	r4, r4, #2
 8000fac:	f04f 0c0f 	mov.w	ip, #15
 8000fb0:	fa0c f604 	lsl.w	r6, ip, r4
 8000fb4:	ea06 0c05 	and.w	ip, r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fb8:	4d2a      	ldr	r5, [pc, #168]	; (8001064 <HAL_GPIO_DeInit+0x120>)
 8000fba:	42a8      	cmp	r0, r5
 8000fbc:	d0c7      	beq.n	8000f4e <HAL_GPIO_DeInit+0xa>
 8000fbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fc2:	42a8      	cmp	r0, r5
 8000fc4:	d012      	beq.n	8000fec <HAL_GPIO_DeInit+0xa8>
 8000fc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fca:	42a8      	cmp	r0, r5
 8000fcc:	d011      	beq.n	8000ff2 <HAL_GPIO_DeInit+0xae>
 8000fce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fd2:	42a8      	cmp	r0, r5
 8000fd4:	d010      	beq.n	8000ff8 <HAL_GPIO_DeInit+0xb4>
 8000fd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fda:	42a8      	cmp	r0, r5
 8000fdc:	d00f      	beq.n	8000ffe <HAL_GPIO_DeInit+0xba>
 8000fde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fe2:	42a8      	cmp	r0, r5
 8000fe4:	d0b0      	beq.n	8000f48 <HAL_GPIO_DeInit+0x4>
 8000fe6:	f04f 0e06 	mov.w	lr, #6
 8000fea:	e7b2      	b.n	8000f52 <HAL_GPIO_DeInit+0xe>
 8000fec:	f04f 0e01 	mov.w	lr, #1
 8000ff0:	e7af      	b.n	8000f52 <HAL_GPIO_DeInit+0xe>
 8000ff2:	f04f 0e02 	mov.w	lr, #2
 8000ff6:	e7ac      	b.n	8000f52 <HAL_GPIO_DeInit+0xe>
 8000ff8:	f04f 0e03 	mov.w	lr, #3
 8000ffc:	e7a9      	b.n	8000f52 <HAL_GPIO_DeInit+0xe>
 8000ffe:	f04f 0e04 	mov.w	lr, #4
 8001002:	e7a6      	b.n	8000f52 <HAL_GPIO_DeInit+0xe>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001004:	4c18      	ldr	r4, [pc, #96]	; (8001068 <HAL_GPIO_DeInit+0x124>)
 8001006:	6825      	ldr	r5, [r4, #0]
 8001008:	ea25 0503 	bic.w	r5, r5, r3
 800100c:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800100e:	6865      	ldr	r5, [r4, #4]
 8001010:	ea25 0503 	bic.w	r5, r5, r3
 8001014:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001016:	68e5      	ldr	r5, [r4, #12]
 8001018:	ea25 0503 	bic.w	r5, r5, r3
 800101c:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800101e:	68a5      	ldr	r5, [r4, #8]
 8001020:	ea25 0503 	bic.w	r5, r5, r3
 8001024:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001026:	f8df c038 	ldr.w	ip, [pc, #56]	; 8001060 <HAL_GPIO_DeInit+0x11c>
 800102a:	1cbc      	adds	r4, r7, #2
 800102c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8001030:	ea25 0506 	bic.w	r5, r5, r6
 8001034:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8001038:	e78f      	b.n	8000f5a <HAL_GPIO_DeInit+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800103a:	1d05      	adds	r5, r0, #4
 800103c:	e790      	b.n	8000f60 <HAL_GPIO_DeInit+0x1c>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800103e:	f1a2 0e08 	sub.w	lr, r2, #8
 8001042:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001046:	e78f      	b.n	8000f68 <HAL_GPIO_DeInit+0x24>
  }
}
 8001048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 800104a:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 800104c:	fa31 f302 	lsrs.w	r3, r1, r2
 8001050:	d005      	beq.n	800105e <HAL_GPIO_DeInit+0x11a>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001052:	2301      	movs	r3, #1
 8001054:	4093      	lsls	r3, r2
    if (iocurrent)
 8001056:	400b      	ands	r3, r1
 8001058:	d0f7      	beq.n	800104a <HAL_GPIO_DeInit+0x106>
{
 800105a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105c:	e79e      	b.n	8000f9c <HAL_GPIO_DeInit+0x58>
 800105e:	4770      	bx	lr
 8001060:	40010000 	.word	0x40010000
 8001064:	40010800 	.word	0x40010800
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800106c:	6883      	ldr	r3, [r0, #8]
 800106e:	4219      	tst	r1, r3
 8001070:	d001      	beq.n	8001076 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001072:	2001      	movs	r0, #1
 8001074:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001076:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001078:	4770      	bx	lr

0800107a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800107a:	b10a      	cbz	r2, 8001080 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107c:	6101      	str	r1, [r0, #16]
 800107e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001080:	0409      	lsls	r1, r1, #16
 8001082:	6101      	str	r1, [r0, #16]
  }
}
 8001084:	4770      	bx	lr
	...

08001088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001088:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <RCC_Delay+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <RCC_Delay+0x28>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0a5b      	lsrs	r3, r3, #9
 8001096:	fb00 f303 	mul.w	r3, r0, r3
 800109a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800109c:	bf00      	nop
  }
  while (Delay --);
 800109e:	9b01      	ldr	r3, [sp, #4]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	9201      	str	r2, [sp, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f9      	bne.n	800109c <RCC_Delay+0x14>
}
 80010a8:	b002      	add	sp, #8
 80010aa:	4770      	bx	lr
 80010ac:	20000000 	.word	0x20000000
 80010b0:	10624dd3 	.word	0x10624dd3

080010b4 <HAL_RCC_DeInit>:
{
 80010b4:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 80010b6:	f7ff fc49 	bl	800094c <HAL_GetTick>
 80010ba:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80010bc:	4a36      	ldr	r2, [pc, #216]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 80010be:	6813      	ldr	r3, [r2, #0]
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f013 0f02 	tst.w	r3, #2
 80010ce:	d107      	bne.n	80010e0 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc3c 	bl	800094c <HAL_GetTick>
 80010d4:	1b00      	subs	r0, r0, r4
 80010d6:	2802      	cmp	r0, #2
 80010d8:	d9f5      	bls.n	80010c6 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 80010da:	2403      	movs	r4, #3
}
 80010dc:	4620      	mov	r0, r4
 80010de:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80010e0:	4d2d      	ldr	r5, [pc, #180]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80010ee:	f7ff fc2d 	bl	800094c <HAL_GetTick>
 80010f2:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 80010f4:	2300      	movs	r3, #0
 80010f6:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f013 0f0c 	tst.w	r3, #12
 8001100:	d008      	beq.n	8001114 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001102:	f7ff fc23 	bl	800094c <HAL_GetTick>
 8001106:	1b00      	subs	r0, r0, r4
 8001108:	f241 3388 	movw	r3, #5000	; 0x1388
 800110c:	4298      	cmp	r0, r3
 800110e:	d9f3      	bls.n	80010f8 <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8001110:	2403      	movs	r4, #3
 8001112:	e7e3      	b.n	80010dc <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_RCC_DeInit+0xe8>)
 8001116:	4a22      	ldr	r2, [pc, #136]	; (80011a0 <HAL_RCC_DeInit+0xec>)
 8001118:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_RCC_DeInit+0xf0>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f7ff fbd1 	bl	80008c4 <HAL_InitTick>
 8001122:	4604      	mov	r4, r0
 8001124:	b108      	cbz	r0, 800112a <HAL_RCC_DeInit+0x76>
    return HAL_ERROR;
 8001126:	2401      	movs	r4, #1
 8001128:	e7d8      	b.n	80010dc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800112a:	f7ff fc0f 	bl	800094c <HAL_GetTick>
 800112e:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001138:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001142:	d006      	beq.n	8001152 <HAL_RCC_DeInit+0x9e>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fc02 	bl	800094c <HAL_GetTick>
 8001148:	1b40      	subs	r0, r0, r5
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f5      	bls.n	800113a <HAL_RCC_DeInit+0x86>
      return HAL_TIMEOUT;
 800114e:	2403      	movs	r4, #3
 8001150:	e7c4      	b.n	80010dc <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 8001152:	4e11      	ldr	r6, [pc, #68]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 8001154:	2300      	movs	r3, #0
 8001156:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8001158:	f7ff fbf8 	bl	800094c <HAL_GetTick>
 800115c:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800115e:	6833      	ldr	r3, [r6, #0]
 8001160:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001164:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800116e:	d006      	beq.n	800117e <HAL_RCC_DeInit+0xca>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fbec 	bl	800094c <HAL_GetTick>
 8001174:	1b40      	subs	r0, r0, r5
 8001176:	2864      	cmp	r0, #100	; 0x64
 8001178:	d9f5      	bls.n	8001166 <HAL_RCC_DeInit+0xb2>
      return HAL_TIMEOUT;
 800117a:	2403      	movs	r4, #3
 800117c:	e7ae      	b.n	80010dc <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_RCC_DeInit+0xe4>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001186:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001194:	e7a2      	b.n	80010dc <HAL_RCC_DeInit+0x28>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	20000000 	.word	0x20000000
 80011a0:	007a1200 	.word	0x007a1200
 80011a4:	20000008 	.word	0x20000008

080011a8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80011a8:	2800      	cmp	r0, #0
 80011aa:	f000 81f1 	beq.w	8001590 <HAL_RCC_OscConfig+0x3e8>
{
 80011ae:	b570      	push	{r4, r5, r6, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b4:	6803      	ldr	r3, [r0, #0]
 80011b6:	f013 0f01 	tst.w	r3, #1
 80011ba:	d02c      	beq.n	8001216 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011bc:	4b99      	ldr	r3, [pc, #612]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d01d      	beq.n	8001204 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c8:	4b96      	ldr	r3, [pc, #600]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d012      	beq.n	80011fa <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d041      	beq.n	8001260 <HAL_RCC_OscConfig+0xb8>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d155      	bne.n	800128c <HAL_RCC_OscConfig+0xe4>
 80011e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e037      	b.n	800126a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fa:	4b8a      	ldr	r3, [pc, #552]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001202:	d0e7      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	4b87      	ldr	r3, [pc, #540]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800120c:	d003      	beq.n	8001216 <HAL_RCC_OscConfig+0x6e>
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 81bf 	beq.w	8001594 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	f013 0f02 	tst.w	r3, #2
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121e:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f013 0f0c 	tst.w	r3, #12
 8001226:	d05f      	beq.n	80012e8 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001228:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d054      	beq.n	80012de <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	6923      	ldr	r3, [r4, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 808a 	beq.w	8001350 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b7a      	ldr	r3, [pc, #488]	; (8001428 <HAL_RCC_OscConfig+0x280>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001242:	f7ff fb83 	bl	800094c <HAL_GetTick>
 8001246:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f013 0f02 	tst.w	r3, #2
 8001250:	d175      	bne.n	800133e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fb7b 	bl	800094c <HAL_GetTick>
 8001256:	1b40      	subs	r0, r0, r5
 8001258:	2802      	cmp	r0, #2
 800125a:	d9f5      	bls.n	8001248 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800125c:	2003      	movs	r0, #3
 800125e:	e19e      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	4a70      	ldr	r2, [pc, #448]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001262:	6813      	ldr	r3, [r2, #0]
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126a:	6863      	ldr	r3, [r4, #4]
 800126c:	b343      	cbz	r3, 80012c0 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800126e:	f7ff fb6d 	bl	800094c <HAL_GetTick>
 8001272:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001274:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800127c:	d1cb      	bne.n	8001216 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127e:	f7ff fb65 	bl	800094c <HAL_GetTick>
 8001282:	1b40      	subs	r0, r0, r5
 8001284:	2864      	cmp	r0, #100	; 0x64
 8001286:	d9f5      	bls.n	8001274 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001288:	2003      	movs	r0, #3
 800128a:	e188      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_OscConfig+0xfe>
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e7e1      	b.n	800126a <HAL_RCC_OscConfig+0xc2>
 80012a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012aa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e7d4      	b.n	800126a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb44 	bl	800094c <HAL_GetTick>
 80012c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	4b57      	ldr	r3, [pc, #348]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012ce:	d0a2      	beq.n	8001216 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb3c 	bl	800094c <HAL_GetTick>
 80012d4:	1b40      	subs	r0, r0, r5
 80012d6:	2864      	cmp	r0, #100	; 0x64
 80012d8:	d9f5      	bls.n	80012c6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80012da:	2003      	movs	r0, #3
 80012dc:	e15f      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012de:	4b51      	ldr	r3, [pc, #324]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012e6:	d1a5      	bne.n	8001234 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f013 0f02 	tst.w	r3, #2
 80012f0:	d003      	beq.n	80012fa <HAL_RCC_OscConfig+0x152>
 80012f2:	6923      	ldr	r3, [r4, #16]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	f040 814f 	bne.w	8001598 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001302:	6961      	ldr	r1, [r4, #20]
 8001304:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001308:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	f013 0f08 	tst.w	r3, #8
 8001310:	d033      	beq.n	800137a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001312:	69a3      	ldr	r3, [r4, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001318:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_RCC_OscConfig+0x280>)
 800131a:	2201      	movs	r2, #1
 800131c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001320:	f7ff fb14 	bl	800094c <HAL_GetTick>
 8001324:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	f013 0f02 	tst.w	r3, #2
 800132e:	d121      	bne.n	8001374 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fb0c 	bl	800094c <HAL_GetTick>
 8001334:	1b40      	subs	r0, r0, r5
 8001336:	2802      	cmp	r0, #2
 8001338:	d9f5      	bls.n	8001326 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e12f      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4a39      	ldr	r2, [pc, #228]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001346:	6961      	ldr	r1, [r4, #20]
 8001348:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e7dc      	b.n	800130a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <HAL_RCC_OscConfig+0x280>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001356:	f7ff faf9 	bl	800094c <HAL_GetTick>
 800135a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f013 0f02 	tst.w	r3, #2
 8001364:	d0d1      	beq.n	800130a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff faf1 	bl	800094c <HAL_GetTick>
 800136a:	1b40      	subs	r0, r0, r5
 800136c:	2802      	cmp	r0, #2
 800136e:	d9f5      	bls.n	800135c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001370:	2003      	movs	r0, #3
 8001372:	e114      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fe87 	bl	8001088 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	f013 0f04 	tst.w	r3, #4
 8001380:	f000 8096 	beq.w	80014b0 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800138c:	d134      	bne.n	80013f8 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001396:	61da      	str	r2, [r3, #28]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013a2:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_RCC_OscConfig+0x284>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013ac:	d026      	beq.n	80013fc <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ae:	68e3      	ldr	r3, [r4, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d03d      	beq.n	8001430 <HAL_RCC_OscConfig+0x288>
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d153      	bne.n	8001460 <HAL_RCC_OscConfig+0x2b8>
 80013b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	621a      	str	r2, [r3, #32]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	621a      	str	r2, [r3, #32]
 80013d0:	e033      	b.n	800143a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_RCC_OscConfig+0x280>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80013da:	f7ff fab7 	bl	800094c <HAL_GetTick>
 80013de:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	f013 0f02 	tst.w	r3, #2
 80013e8:	d0c7      	beq.n	800137a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff faaf 	bl	800094c <HAL_GetTick>
 80013ee:	1b40      	subs	r0, r0, r5
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d9f5      	bls.n	80013e0 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80013f4:	2003      	movs	r0, #3
 80013f6:	e0d2      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80013f8:	2500      	movs	r5, #0
 80013fa:	e7d3      	b.n	80013a4 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_RCC_OscConfig+0x284>)
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001406:	f7ff faa1 	bl	800094c <HAL_GetTick>
 800140a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_RCC_OscConfig+0x284>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001414:	d1cb      	bne.n	80013ae <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001416:	f7ff fa99 	bl	800094c <HAL_GetTick>
 800141a:	1b80      	subs	r0, r0, r6
 800141c:	2864      	cmp	r0, #100	; 0x64
 800141e:	d9f5      	bls.n	800140c <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001420:	2003      	movs	r0, #3
 8001422:	e0bc      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
 8001424:	40021000 	.word	0x40021000
 8001428:	42420000 	.word	0x42420000
 800142c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001430:	4a5f      	ldr	r2, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001432:	6a13      	ldr	r3, [r2, #32]
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143a:	68e3      	ldr	r3, [r4, #12]
 800143c:	b333      	cbz	r3, 800148c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800143e:	f7ff fa85 	bl	800094c <HAL_GetTick>
 8001442:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f013 0f02 	tst.w	r3, #2
 800144c:	d12f      	bne.n	80014ae <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fa7d 	bl	800094c <HAL_GetTick>
 8001452:	1b80      	subs	r0, r0, r6
 8001454:	f241 3388 	movw	r3, #5000	; 0x1388
 8001458:	4298      	cmp	r0, r3
 800145a:	d9f3      	bls.n	8001444 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 800145c:	2003      	movs	r0, #3
 800145e:	e09e      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	2b05      	cmp	r3, #5
 8001462:	d009      	beq.n	8001478 <HAL_RCC_OscConfig+0x2d0>
 8001464:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001466:	6a1a      	ldr	r2, [r3, #32]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	621a      	str	r2, [r3, #32]
 800146e:	6a1a      	ldr	r2, [r3, #32]
 8001470:	f022 0204 	bic.w	r2, r2, #4
 8001474:	621a      	str	r2, [r3, #32]
 8001476:	e7e0      	b.n	800143a <HAL_RCC_OscConfig+0x292>
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 800147a:	6a1a      	ldr	r2, [r3, #32]
 800147c:	f042 0204 	orr.w	r2, r2, #4
 8001480:	621a      	str	r2, [r3, #32]
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	f042 0201 	orr.w	r2, r2, #1
 8001488:	621a      	str	r2, [r3, #32]
 800148a:	e7d6      	b.n	800143a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800148c:	f7ff fa5e 	bl	800094c <HAL_GetTick>
 8001490:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	f013 0f02 	tst.w	r3, #2
 800149a:	d008      	beq.n	80014ae <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff fa56 	bl	800094c <HAL_GetTick>
 80014a0:	1b80      	subs	r0, r0, r6
 80014a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80014a6:	4298      	cmp	r0, r3
 80014a8:	d9f3      	bls.n	8001492 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80014aa:	2003      	movs	r0, #3
 80014ac:	e077      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80014ae:	b9e5      	cbnz	r5, 80014ea <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b0:	69e3      	ldr	r3, [r4, #28]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d072      	beq.n	800159c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b6:	4a3e      	ldr	r2, [pc, #248]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 80014b8:	6852      	ldr	r2, [r2, #4]
 80014ba:	f002 020c 	and.w	r2, r2, #12
 80014be:	2a08      	cmp	r2, #8
 80014c0:	d056      	beq.n	8001570 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d017      	beq.n	80014f6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x40c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80014cc:	f7ff fa3e 	bl	800094c <HAL_GetTick>
 80014d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014da:	d047      	beq.n	800156c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fa36 	bl	800094c <HAL_GetTick>
 80014e0:	1b00      	subs	r0, r0, r4
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d9f5      	bls.n	80014d2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80014e6:	2003      	movs	r0, #3
 80014e8:	e059      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ea:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 80014ec:	69d3      	ldr	r3, [r2, #28]
 80014ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f2:	61d3      	str	r3, [r2, #28]
 80014f4:	e7dc      	b.n	80014b0 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_RCC_OscConfig+0x40c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa26 	bl	800094c <HAL_GetTick>
 8001500:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800150a:	d006      	beq.n	800151a <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fa1e 	bl	800094c <HAL_GetTick>
 8001510:	1b40      	subs	r0, r0, r5
 8001512:	2802      	cmp	r0, #2
 8001514:	d9f5      	bls.n	8001502 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001516:	2003      	movs	r0, #3
 8001518:	e041      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800151a:	6a23      	ldr	r3, [r4, #32]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d01a      	beq.n	8001558 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001522:	4923      	ldr	r1, [pc, #140]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001524:	684b      	ldr	r3, [r1, #4]
 8001526:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800152a:	6a22      	ldr	r2, [r4, #32]
 800152c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800152e:	4302      	orrs	r2, r0
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_RCC_OscConfig+0x40c>)
 8001536:	2201      	movs	r2, #1
 8001538:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800153a:	f7ff fa07 	bl	800094c <HAL_GetTick>
 800153e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001548:	d10e      	bne.n	8001568 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff f9ff 	bl	800094c <HAL_GetTick>
 800154e:	1b00      	subs	r0, r0, r4
 8001550:	2802      	cmp	r0, #2
 8001552:	d9f5      	bls.n	8001540 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001554:	2003      	movs	r0, #3
 8001556:	e022      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 800155a:	6853      	ldr	r3, [r2, #4]
 800155c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001560:	68a1      	ldr	r1, [r4, #8]
 8001562:	430b      	orrs	r3, r1
 8001564:	6053      	str	r3, [r2, #4]
 8001566:	e7dc      	b.n	8001522 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001568:	2000      	movs	r0, #0
 800156a:	e018      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
 800156c:	2000      	movs	r0, #0
 800156e:	e016      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001570:	2b01      	cmp	r3, #1
 8001572:	d016      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_RCC_OscConfig+0x408>)
 8001576:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001578:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800157c:	6a22      	ldr	r2, [r4, #32]
 800157e:	4291      	cmp	r1, r2
 8001580:	d111      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001582:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001586:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001588:	4293      	cmp	r3, r2
 800158a:	d10e      	bne.n	80015aa <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800158c:	2000      	movs	r0, #0
 800158e:	e006      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
}
 8001592:	4770      	bx	lr
        return HAL_ERROR;
 8001594:	2001      	movs	r0, #1
 8001596:	e002      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800159c:	2000      	movs	r0, #0
}
 800159e:	b002      	add	sp, #8
 80015a0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80015a2:	2001      	movs	r0, #1
 80015a4:	e7fb      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80015a6:	2001      	movs	r0, #1
 80015a8:	e7f9      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
 80015aa:	2001      	movs	r0, #1
 80015ac:	e7f7      	b.n	800159e <HAL_RCC_OscConfig+0x3f6>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	42420000 	.word	0x42420000

080015b8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x40>)
 80015ba:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80015bc:	f003 020c 	and.w	r2, r3, #12
 80015c0:	2a08      	cmp	r2, #8
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <HAL_RCC_GetSysClockFreq+0x44>)
}
 80015c6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015c8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <HAL_RCC_GetSysClockFreq+0x48>)
 80015ce:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x40>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_RCC_GetSysClockFreq+0x4c>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015e2:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_RCC_GetSysClockFreq+0x44>)
 80015e4:	fb02 f000 	mul.w	r0, r2, r0
 80015e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015ec:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_GetSysClockFreq+0x50>)
 80015f0:	fb03 f000 	mul.w	r0, r3, r0
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	08001fbc 	.word	0x08001fbc
 8001604:	08001fcc 	.word	0x08001fcc
 8001608:	003d0900 	.word	0x003d0900

0800160c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800160c:	2800      	cmp	r0, #0
 800160e:	f000 80a0 	beq.w	8001752 <HAL_RCC_ClockConfig+0x146>
{
 8001612:	b570      	push	{r4, r5, r6, lr}
 8001614:	460d      	mov	r5, r1
 8001616:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b52      	ldr	r3, [pc, #328]	; (8001764 <HAL_RCC_ClockConfig+0x158>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	428b      	cmp	r3, r1
 8001622:	d20b      	bcs.n	800163c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001624:	4a4f      	ldr	r2, [pc, #316]	; (8001764 <HAL_RCC_ClockConfig+0x158>)
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	f023 0307 	bic.w	r3, r3, #7
 800162c:	430b      	orrs	r3, r1
 800162e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	428b      	cmp	r3, r1
 8001638:	f040 808d 	bne.w	8001756 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f013 0f02 	tst.w	r3, #2
 8001642:	d017      	beq.n	8001674 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	f013 0f04 	tst.w	r3, #4
 8001648:	d004      	beq.n	8001654 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800164a:	4a47      	ldr	r2, [pc, #284]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 800164c:	6853      	ldr	r3, [r2, #4]
 800164e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001652:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	f013 0f08 	tst.w	r3, #8
 800165a:	d004      	beq.n	8001666 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 800165e:	6853      	ldr	r3, [r2, #4]
 8001660:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001664:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001666:	4a40      	ldr	r2, [pc, #256]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 8001668:	6853      	ldr	r3, [r2, #4]
 800166a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800166e:	68a1      	ldr	r1, [r4, #8]
 8001670:	430b      	orrs	r3, r1
 8001672:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	f013 0f01 	tst.w	r3, #1
 800167a:	d031      	beq.n	80016e0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167c:	6863      	ldr	r3, [r4, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d020      	beq.n	80016c4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001682:	2b02      	cmp	r3, #2
 8001684:	d025      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f012 0f02 	tst.w	r2, #2
 800168e:	d064      	beq.n	800175a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001690:	4935      	ldr	r1, [pc, #212]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 8001692:	684a      	ldr	r2, [r1, #4]
 8001694:	f022 0203 	bic.w	r2, r2, #3
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800169c:	f7ff f956 	bl	800094c <HAL_GetTick>
 80016a0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	6862      	ldr	r2, [r4, #4]
 80016ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016b0:	d016      	beq.n	80016e0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b2:	f7ff f94b 	bl	800094c <HAL_GetTick>
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80016bc:	4298      	cmp	r0, r3
 80016be:	d9f0      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80016c0:	2003      	movs	r0, #3
 80016c2:	e045      	b.n	8001750 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c4:	4a28      	ldr	r2, [pc, #160]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80016cc:	d1e0      	bne.n	8001690 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80016ce:	2001      	movs	r0, #1
 80016d0:	e03e      	b.n	8001750 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4a25      	ldr	r2, [pc, #148]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80016da:	d1d9      	bne.n	8001690 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80016dc:	2001      	movs	r0, #1
 80016de:	e037      	b.n	8001750 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_RCC_ClockConfig+0x158>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	42ab      	cmp	r3, r5
 80016ea:	d90a      	bls.n	8001702 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_RCC_ClockConfig+0x158>)
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	f023 0307 	bic.w	r3, r3, #7
 80016f4:	432b      	orrs	r3, r5
 80016f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f8:	6813      	ldr	r3, [r2, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	42ab      	cmp	r3, r5
 8001700:	d12d      	bne.n	800175e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	f013 0f04 	tst.w	r3, #4
 8001708:	d006      	beq.n	8001718 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 800170c:	6853      	ldr	r3, [r2, #4]
 800170e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001712:	68e1      	ldr	r1, [r4, #12]
 8001714:	430b      	orrs	r3, r1
 8001716:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	f013 0f08 	tst.w	r3, #8
 800171e:	d007      	beq.n	8001730 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 8001722:	6853      	ldr	r3, [r2, #4]
 8001724:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001728:	6921      	ldr	r1, [r4, #16]
 800172a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800172e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001730:	f7ff ff42 	bl	80015b8 <HAL_RCC_GetSysClockFreq>
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_ClockConfig+0x15c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x160>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	40d8      	lsrs	r0, r3
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x164>)
 8001744:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_ClockConfig+0x168>)
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	f7ff f8bb 	bl	80008c4 <HAL_InitTick>
  return HAL_OK;
 800174e:	2000      	movs	r0, #0
}
 8001750:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
}
 8001754:	4770      	bx	lr
    return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
 8001758:	e7fa      	b.n	8001750 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
 800175c:	e7f8      	b.n	8001750 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
 8001760:	e7f6      	b.n	8001750 <HAL_RCC_ClockConfig+0x144>
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000
 800176c:	08001fac 	.word	0x08001fac
 8001770:	20000000 	.word	0x20000000
 8001774:	20000008 	.word	0x20000008

08001778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	4605      	mov	r5, r0
 8001780:	4688      	mov	r8, r1
 8001782:	4617      	mov	r7, r2
 8001784:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001786:	f7ff f8e1 	bl	800094c <HAL_GetTick>
 800178a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800178c:	1a1b      	subs	r3, r3, r0
 800178e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8001792:	f7ff f8db 	bl	800094c <HAL_GetTick>
 8001796:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80017a0:	fb09 f303 	mul.w	r3, r9, r3
 80017a4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80017a6:	682b      	ldr	r3, [r5, #0]
 80017a8:	689c      	ldr	r4, [r3, #8]
 80017aa:	ea38 0404 	bics.w	r4, r8, r4
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	42bb      	cmp	r3, r7
 80017b6:	d040      	beq.n	800183a <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80017b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80017bc:	d0f3      	beq.n	80017a6 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80017be:	f7ff f8c5 	bl	800094c <HAL_GetTick>
 80017c2:	eba0 000a 	sub.w	r0, r0, sl
 80017c6:	4548      	cmp	r0, r9
 80017c8:	d20a      	bcs.n	80017e0 <SPI_WaitFlagStateUntilTimeout+0x68>
 80017ca:	f1b9 0f00 	cmp.w	r9, #0
 80017ce:	d007      	beq.n	80017e0 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80017d0:	9a01      	ldr	r2, [sp, #4]
 80017d2:	b102      	cbz	r2, 80017d6 <SPI_WaitFlagStateUntilTimeout+0x5e>
 80017d4:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80017d6:	9b01      	ldr	r3, [sp, #4]
 80017d8:	3b01      	subs	r3, #1
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	4691      	mov	r9, r2
 80017de:	e7e2      	b.n	80017a6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80017e0:	682a      	ldr	r2, [r5, #0]
 80017e2:	6853      	ldr	r3, [r2, #4]
 80017e4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80017e8:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017ea:	686b      	ldr	r3, [r5, #4]
 80017ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017f0:	d00b      	beq.n	800180a <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80017f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f8:	d014      	beq.n	8001824 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001800:	2300      	movs	r3, #0
 8001802:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8001806:	2003      	movs	r0, #3
 8001808:	e018      	b.n	800183c <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800180a:	68ab      	ldr	r3, [r5, #8]
 800180c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001810:	d002      	beq.n	8001818 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d1ec      	bne.n	80017f2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8001818:	682a      	ldr	r2, [r5, #0]
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e7e6      	b.n	80017f2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8001824:	682a      	ldr	r2, [r5, #0]
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	682a      	ldr	r2, [r5, #0]
 8001830:	6813      	ldr	r3, [r2, #0]
 8001832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e7df      	b.n	80017fa <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800183a:	2000      	movs	r0, #0
}
 800183c:	b002      	add	sp, #8
 800183e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001842:	bf00      	nop
 8001844:	20000000 	.word	0x20000000

08001848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b510      	push	{r4, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	4604      	mov	r4, r0
 800184e:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001850:	9200      	str	r2, [sp, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	f7ff ff8f 	bl	8001778 <SPI_WaitFlagStateUntilTimeout>
 800185a:	b908      	cbnz	r0, 8001860 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800185c:	b002      	add	sp, #8
 800185e:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001860:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001868:	2003      	movs	r0, #3
 800186a:	e7f7      	b.n	800185c <SPI_EndRxTxTransaction+0x14>

0800186c <SPI_EndRxTransaction>:
{
 800186c:	b510      	push	{r4, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	4604      	mov	r4, r0
 8001872:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001874:	6841      	ldr	r1, [r0, #4]
 8001876:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800187a:	d010      	beq.n	800189e <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800187c:	6861      	ldr	r1, [r4, #4]
 800187e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001882:	d103      	bne.n	800188c <SPI_EndRxTransaction+0x20>
 8001884:	68a1      	ldr	r1, [r4, #8]
 8001886:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800188a:	d015      	beq.n	80018b8 <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800188c:	9200      	str	r2, [sp, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff ff70 	bl	8001778 <SPI_WaitFlagStateUntilTimeout>
 8001898:	b9e0      	cbnz	r0, 80018d4 <SPI_EndRxTransaction+0x68>
}
 800189a:	b002      	add	sp, #8
 800189c:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800189e:	6881      	ldr	r1, [r0, #8]
 80018a0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018a4:	d002      	beq.n	80018ac <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018a6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80018aa:	d1e7      	bne.n	800187c <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80018ac:	6820      	ldr	r0, [r4, #0]
 80018ae:	6801      	ldr	r1, [r0, #0]
 80018b0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80018b4:	6001      	str	r1, [r0, #0]
 80018b6:	e7e1      	b.n	800187c <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80018b8:	9200      	str	r2, [sp, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff ff5a 	bl	8001778 <SPI_WaitFlagStateUntilTimeout>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d0e8      	beq.n	800189a <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80018d0:	2003      	movs	r0, #3
 80018d2:	e7e2      	b.n	800189a <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80018dc:	2003      	movs	r0, #3
 80018de:	e7dc      	b.n	800189a <SPI_EndRxTransaction+0x2e>

080018e0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d056      	beq.n	8001992 <HAL_SPI_Init+0xb2>
{
 80018e4:	b510      	push	{r4, lr}
 80018e6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018ea:	b933      	cbnz	r3, 80018fa <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ec:	6843      	ldr	r3, [r0, #4]
 80018ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018f2:	d005      	beq.n	8001900 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61c3      	str	r3, [r0, #28]
 80018f8:	e002      	b.n	8001900 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018fe:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001904:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001908:	2b00      	cmp	r3, #0
 800190a:	d03c      	beq.n	8001986 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800190c:	2302      	movs	r3, #2
 800190e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	6813      	ldr	r3, [r2, #0]
 8001916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800191a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800191c:	6863      	ldr	r3, [r4, #4]
 800191e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001922:	68a2      	ldr	r2, [r4, #8]
 8001924:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8001928:	4313      	orrs	r3, r2
 800192a:	68e2      	ldr	r2, [r4, #12]
 800192c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001930:	4313      	orrs	r3, r2
 8001932:	6922      	ldr	r2, [r4, #16]
 8001934:	f002 0202 	and.w	r2, r2, #2
 8001938:	4313      	orrs	r3, r2
 800193a:	6962      	ldr	r2, [r4, #20]
 800193c:	f002 0201 	and.w	r2, r2, #1
 8001940:	4313      	orrs	r3, r2
 8001942:	69a2      	ldr	r2, [r4, #24]
 8001944:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001948:	4313      	orrs	r3, r2
 800194a:	69e2      	ldr	r2, [r4, #28]
 800194c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001950:	4313      	orrs	r3, r2
 8001952:	6a22      	ldr	r2, [r4, #32]
 8001954:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001958:	4313      	orrs	r3, r2
 800195a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800195c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001960:	6821      	ldr	r1, [r4, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001966:	8b63      	ldrh	r3, [r4, #26]
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001970:	6822      	ldr	r2, [r4, #0]
 8001972:	69d3      	ldr	r3, [r2, #28]
 8001974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001978:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800197a:	2000      	movs	r0, #0
 800197c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800197e:	2301      	movs	r3, #1
 8001980:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001984:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001986:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800198a:	4620      	mov	r0, r4
 800198c:	f7fe fede 	bl	800074c <HAL_SPI_MspInit>
 8001990:	e7bc      	b.n	800190c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8001992:	2001      	movs	r0, #1
}
 8001994:	4770      	bx	lr

08001996 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8001996:	b190      	cbz	r0, 80019be <HAL_SPI_DeInit+0x28>
{
 8001998:	b510      	push	{r4, lr}
 800199a:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800199c:	2302      	movs	r3, #2
 800199e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80019a2:	6802      	ldr	r2, [r0, #0]
 80019a4:	6813      	ldr	r3, [r2, #0]
 80019a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019aa:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80019ac:	f7fe ff08 	bl	80007c0 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019b0:	2000      	movs	r0, #0
 80019b2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80019b4:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80019b8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 80019bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019be:	2001      	movs	r0, #1
}
 80019c0:	4770      	bx	lr

080019c2 <HAL_SPI_Transmit>:
{
 80019c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019c6:	b083      	sub	sp, #12
 80019c8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80019ca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	f000 80d1 	beq.w	8001b76 <HAL_SPI_Transmit+0x1b4>
 80019d4:	4604      	mov	r4, r0
 80019d6:	4688      	mov	r8, r1
 80019d8:	4691      	mov	r9, r2
 80019da:	2301      	movs	r3, #1
 80019dc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80019e0:	f7fe ffb4 	bl	800094c <HAL_GetTick>
 80019e4:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80019e6:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80019ea:	b2f6      	uxtb	r6, r6
 80019ec:	2e01      	cmp	r6, #1
 80019ee:	f040 80ba 	bne.w	8001b66 <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 80019f2:	f1b8 0f00 	cmp.w	r8, #0
 80019f6:	f000 80b7 	beq.w	8001b68 <HAL_SPI_Transmit+0x1a6>
 80019fa:	f1b9 0f00 	cmp.w	r9, #0
 80019fe:	f000 80b3 	beq.w	8001b68 <HAL_SPI_Transmit+0x1a6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a0c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a10:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a14:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a18:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a1a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a1e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a20:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a22:	68a3      	ldr	r3, [r4, #8]
 8001a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a28:	d01e      	beq.n	8001a68 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a32:	d103      	bne.n	8001a3c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a3c:	68e3      	ldr	r3, [r4, #12]
 8001a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a42:	d01c      	beq.n	8001a7e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a44:	6863      	ldr	r3, [r4, #4]
 8001a46:	b113      	cbz	r3, 8001a4e <HAL_SPI_Transmit+0x8c>
 8001a48:	f1b9 0f01 	cmp.w	r9, #1
 8001a4c:	d155      	bne.n	8001afa <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a58:	3301      	adds	r3, #1
 8001a5a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001a66:	e048      	b.n	8001afa <HAL_SPI_Transmit+0x138>
    __HAL_SPI_DISABLE(hspi);
 8001a68:	6822      	ldr	r2, [r4, #0]
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a70:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8001a72:	6822      	ldr	r2, [r4, #0]
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e7d5      	b.n	8001a2a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a7e:	6863      	ldr	r3, [r4, #4]
 8001a80:	b113      	cbz	r3, 8001a88 <HAL_SPI_Transmit+0xc6>
 8001a82:	f1b9 0f01 	cmp.w	r9, #1
 8001a86:	d115      	bne.n	8001ab4 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	8812      	ldrh	r2, [r2, #0]
 8001a8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a92:	3302      	adds	r3, #2
 8001a94:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001aa0:	e008      	b.n	8001ab4 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aa2:	f7fe ff53 	bl	800094c <HAL_GetTick>
 8001aa6:	1bc0      	subs	r0, r0, r7
 8001aa8:	42a8      	cmp	r0, r5
 8001aaa:	d302      	bcc.n	8001ab2 <HAL_SPI_Transmit+0xf0>
 8001aac:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ab0:	d115      	bne.n	8001ade <HAL_SPI_Transmit+0x11c>
 8001ab2:	b1a5      	cbz	r5, 8001ade <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8001ab4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03c      	beq.n	8001b36 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	f012 0f02 	tst.w	r2, #2
 8001ac4:	d0ed      	beq.n	8001aa2 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ac6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ace:	3302      	adds	r3, #2
 8001ad0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ad2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001adc:	e7ea      	b.n	8001ab4 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001ae4:	2603      	movs	r6, #3
          goto error;
 8001ae6:	e03f      	b.n	8001b68 <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ae8:	f7fe ff30 	bl	800094c <HAL_GetTick>
 8001aec:	1bc0      	subs	r0, r0, r7
 8001aee:	42a8      	cmp	r0, r5
 8001af0:	d302      	bcc.n	8001af8 <HAL_SPI_Transmit+0x136>
 8001af2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001af6:	d119      	bne.n	8001b2c <HAL_SPI_Transmit+0x16a>
 8001af8:	b1c5      	cbz	r5, 8001b2c <HAL_SPI_Transmit+0x16a>
    while (hspi->TxXferCount > 0U)
 8001afa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b1d3      	cbz	r3, 8001b36 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	f012 0f02 	tst.w	r2, #2
 8001b08:	d0ee      	beq.n	8001ae8 <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b12:	3301      	adds	r3, #1
 8001b14:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001b16:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8001b1a:	fa1f fc8c 	uxth.w	ip, ip
 8001b1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001b22:	fa1f fc8c 	uxth.w	ip, ip
 8001b26:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8001b2a:	e7e6      	b.n	8001afa <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001b32:	2603      	movs	r6, #3
          goto error;
 8001b34:	e018      	b.n	8001b68 <HAL_SPI_Transmit+0x1a6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b36:	463a      	mov	r2, r7
 8001b38:	4629      	mov	r1, r5
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fe84 	bl	8001848 <SPI_EndRxTxTransaction>
 8001b40:	b108      	cbz	r0, 8001b46 <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b42:	2320      	movs	r3, #32
 8001b44:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b46:	68a3      	ldr	r3, [r4, #8]
 8001b48:	b933      	cbnz	r3, 8001b58 <HAL_SPI_Transmit+0x196>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	9201      	str	r2, [sp, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b5a:	b92b      	cbnz	r3, 8001b68 <HAL_SPI_Transmit+0x1a6>
    hspi->State = HAL_SPI_STATE_READY;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b62:	2600      	movs	r6, #0
 8001b64:	e000      	b.n	8001b68 <HAL_SPI_Transmit+0x1a6>
    errorcode = HAL_BUSY;
 8001b66:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001b6e:	4630      	mov	r0, r6
 8001b70:	b003      	add	sp, #12
 8001b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8001b76:	2602      	movs	r6, #2
 8001b78:	e7f9      	b.n	8001b6e <HAL_SPI_Transmit+0x1ac>

08001b7a <HAL_SPI_TransmitReceive>:
{
 8001b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	461f      	mov	r7, r3
 8001b82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001b84:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f000 8116 	beq.w	8001dba <HAL_SPI_TransmitReceive+0x240>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4688      	mov	r8, r1
 8001b92:	4691      	mov	r9, r2
 8001b94:	2301      	movs	r3, #1
 8001b96:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001b9a:	f7fe fed7 	bl	800094c <HAL_GetTick>
 8001b9e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8001ba0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001ba4:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001ba6:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d00a      	beq.n	8001bc2 <HAL_SPI_TransmitReceive+0x48>
 8001bac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001bb0:	f040 80f0 	bne.w	8001d94 <HAL_SPI_TransmitReceive+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bb4:	68a2      	ldr	r2, [r4, #8]
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	f040 80f3 	bne.w	8001da2 <HAL_SPI_TransmitReceive+0x228>
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	f040 80f2 	bne.w	8001da6 <HAL_SPI_TransmitReceive+0x22c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bc2:	f1b8 0f00 	cmp.w	r8, #0
 8001bc6:	f000 80f0 	beq.w	8001daa <HAL_SPI_TransmitReceive+0x230>
 8001bca:	f1b9 0f00 	cmp.w	r9, #0
 8001bce:	f000 80ee 	beq.w	8001dae <HAL_SPI_TransmitReceive+0x234>
 8001bd2:	2f00      	cmp	r7, #0
 8001bd4:	f000 80ed 	beq.w	8001db2 <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bd8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d002      	beq.n	8001be8 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001be2:	2305      	movs	r3, #5
 8001be4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bec:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001bf0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bf2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bf4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bf8:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bfa:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8001bfc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bfe:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c08:	d103      	bne.n	8001c12 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c10:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c12:	68e3      	ldr	r3, [r4, #12]
 8001c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c18:	d011      	beq.n	8001c3e <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c1a:	6863      	ldr	r3, [r4, #4]
 8001c1c:	b10b      	cbz	r3, 8001c22 <HAL_SPI_TransmitReceive+0xa8>
 8001c1e:	2f01      	cmp	r7, #1
 8001c20:	d10b      	bne.n	8001c3a <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001c3a:	2701      	movs	r7, #1
 8001c3c:	e06e      	b.n	8001d1c <HAL_SPI_TransmitReceive+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c3e:	6863      	ldr	r3, [r4, #4]
 8001c40:	b10b      	cbz	r3, 8001c46 <HAL_SPI_TransmitReceive+0xcc>
 8001c42:	2f01      	cmp	r7, #1
 8001c44:	d10b      	bne.n	8001c5e <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	8812      	ldrh	r2, [r2, #0]
 8001c4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c50:	3302      	adds	r3, #2
 8001c52:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001c5e:	2701      	movs	r7, #1
 8001c60:	e01b      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	f012 0f01 	tst.w	r2, #1
 8001c6a:	d00e      	beq.n	8001c8a <HAL_SPI_TransmitReceive+0x110>
 8001c6c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	b15a      	cbz	r2, 8001c8a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001c7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001c88:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c8a:	f7fe fe5f 	bl	800094c <HAL_GetTick>
 8001c8e:	1b80      	subs	r0, r0, r6
 8001c90:	42a8      	cmp	r0, r5
 8001c92:	d302      	bcc.n	8001c9a <HAL_SPI_TransmitReceive+0x120>
 8001c94:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c98:	d11e      	bne.n	8001cd8 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b91b      	cbnz	r3, 8001ca8 <HAL_SPI_TransmitReceive+0x12e>
 8001ca0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d05c      	beq.n	8001d62 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	f012 0f02 	tst.w	r2, #2
 8001cb0:	d0d7      	beq.n	8001c62 <HAL_SPI_TransmitReceive+0xe8>
 8001cb2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d0d3      	beq.n	8001c62 <HAL_SPI_TransmitReceive+0xe8>
 8001cba:	2f00      	cmp	r7, #0
 8001cbc:	d0d1      	beq.n	8001c62 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cc0:	8812      	ldrh	r2, [r2, #0]
 8001cc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001cca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001cd4:	2700      	movs	r7, #0
 8001cd6:	e7c4      	b.n	8001c62 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
        goto error;
 8001ce0:	e059      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	f012 0f01 	tst.w	r2, #1
 8001cea:	d00e      	beq.n	8001d0a <HAL_SPI_TransmitReceive+0x190>
 8001cec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	b15a      	cbz	r2, 8001d0a <HAL_SPI_TransmitReceive+0x190>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001cfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001d08:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d0a:	f7fe fe1f 	bl	800094c <HAL_GetTick>
 8001d0e:	1b83      	subs	r3, r0, r6
 8001d10:	42ab      	cmp	r3, r5
 8001d12:	d302      	bcc.n	8001d1a <HAL_SPI_TransmitReceive+0x1a0>
 8001d14:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d18:	d11e      	bne.n	8001d58 <HAL_SPI_TransmitReceive+0x1de>
 8001d1a:	b1ed      	cbz	r5, 8001d58 <HAL_SPI_TransmitReceive+0x1de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b913      	cbnz	r3, 8001d28 <HAL_SPI_TransmitReceive+0x1ae>
 8001d22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b1e3      	cbz	r3, 8001d62 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	f012 0f02 	tst.w	r2, #2
 8001d30:	d0d7      	beq.n	8001ce2 <HAL_SPI_TransmitReceive+0x168>
 8001d32:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d34:	b292      	uxth	r2, r2
 8001d36:	2a00      	cmp	r2, #0
 8001d38:	d0d3      	beq.n	8001ce2 <HAL_SPI_TransmitReceive+0x168>
 8001d3a:	2f00      	cmp	r7, #0
 8001d3c:	d0d1      	beq.n	8001ce2 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001d44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d46:	3301      	adds	r3, #1
 8001d48:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001d54:	2700      	movs	r7, #0
 8001d56:	e7c4      	b.n	8001ce2 <HAL_SPI_TransmitReceive+0x168>
        hspi->State = HAL_SPI_STATE_READY;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8001d5e:	2003      	movs	r0, #3
        goto error;
 8001d60:	e019      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d62:	4632      	mov	r2, r6
 8001d64:	4629      	mov	r1, r5
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff fd6e 	bl	8001848 <SPI_EndRxTxTransaction>
 8001d6c:	b970      	cbnz	r0, 8001d8c <HAL_SPI_TransmitReceive+0x212>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d6e:	68a3      	ldr	r3, [r4, #8]
 8001d70:	b933      	cbnz	r3, 8001d80 <HAL_SPI_TransmitReceive+0x206>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	9201      	str	r2, [sp, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d82:	b9c3      	cbnz	r3, 8001db6 <HAL_SPI_TransmitReceive+0x23c>
    hspi->State = HAL_SPI_STATE_READY;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8001d8a:	e004      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
    goto error;
 8001d92:	e000      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_BUSY;
 8001d94:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8001d96:	2300      	movs	r3, #0
 8001d98:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d9c:	b003      	add	sp, #12
 8001d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8001da2:	2002      	movs	r0, #2
 8001da4:	e7f7      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
 8001da6:	2002      	movs	r0, #2
 8001da8:	e7f5      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8001daa:	2001      	movs	r0, #1
 8001dac:	e7f3      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
 8001dae:	2001      	movs	r0, #1
 8001db0:	e7f1      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
 8001db2:	2001      	movs	r0, #1
 8001db4:	e7ef      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
 8001db8:	e7ed      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x21c>
  __HAL_LOCK(hspi);
 8001dba:	2002      	movs	r0, #2
 8001dbc:	e7ee      	b.n	8001d9c <HAL_SPI_TransmitReceive+0x222>

08001dbe <HAL_SPI_Receive>:
{
 8001dbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001dc6:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
 8001dca:	b2f6      	uxtb	r6, r6
 8001dcc:	2e01      	cmp	r6, #1
 8001dce:	f040 80ab 	bne.w	8001f28 <HAL_SPI_Receive+0x16a>
 8001dd2:	4688      	mov	r8, r1
 8001dd4:	4691      	mov	r9, r2
 8001dd6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001dd8:	6843      	ldr	r3, [r0, #4]
 8001dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dde:	d032      	beq.n	8001e46 <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8001de0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	f000 80a7 	beq.w	8001f38 <HAL_SPI_Receive+0x17a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001df0:	f7fe fdac 	bl	800094c <HAL_GetTick>
 8001df4:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8001df6:	f1b8 0f00 	cmp.w	r8, #0
 8001dfa:	f000 8096 	beq.w	8001f2a <HAL_SPI_Receive+0x16c>
 8001dfe:	f1b9 0f00 	cmp.w	r9, #0
 8001e02:	f000 8092 	beq.w	8001f2a <HAL_SPI_Receive+0x16c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e06:	2304      	movs	r3, #4
 8001e08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e10:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e14:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e18:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e1c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e1e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e20:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e22:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e24:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e26:	68a3      	ldr	r3, [r4, #8]
 8001e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2c:	d018      	beq.n	8001e60 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e36:	d103      	bne.n	8001e40 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e3e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e40:	68e3      	ldr	r3, [r4, #12]
 8001e42:	b30b      	cbz	r3, 8001e88 <HAL_SPI_Receive+0xca>
 8001e44:	e043      	b.n	8001ece <HAL_SPI_Receive+0x110>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e46:	6883      	ldr	r3, [r0, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1c9      	bne.n	8001de0 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e52:	9500      	str	r5, [sp, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	460a      	mov	r2, r1
 8001e58:	f7ff fe8f 	bl	8001b7a <HAL_SPI_TransmitReceive>
 8001e5c:	4606      	mov	r6, r0
 8001e5e:	e067      	b.n	8001f30 <HAL_SPI_Receive+0x172>
    __HAL_SPI_DISABLE(hspi);
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e68:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8001e6a:	6822      	ldr	r2, [r4, #0]
 8001e6c:	6813      	ldr	r3, [r2, #0]
 8001e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e7db      	b.n	8001e2e <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e76:	f7fe fd69 	bl	800094c <HAL_GetTick>
 8001e7a:	1bc0      	subs	r0, r0, r7
 8001e7c:	42a8      	cmp	r0, r5
 8001e7e:	d302      	bcc.n	8001e86 <HAL_SPI_Receive+0xc8>
 8001e80:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001e84:	d115      	bne.n	8001eb2 <HAL_SPI_Receive+0xf4>
 8001e86:	b1a5      	cbz	r5, 8001eb2 <HAL_SPI_Receive+0xf4>
    while (hspi->RxXferCount > 0U)
 8001e88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03c      	beq.n	8001f0a <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	f012 0f01 	tst.w	r2, #1
 8001e98:	d0ed      	beq.n	8001e76 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e9c:	7b1b      	ldrb	r3, [r3, #12]
 8001e9e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001ea6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001eb0:	e7ea      	b.n	8001e88 <HAL_SPI_Receive+0xca>
          hspi->State = HAL_SPI_STATE_READY;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001eb8:	2603      	movs	r6, #3
          goto error;
 8001eba:	e036      	b.n	8001f2a <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ebc:	f7fe fd46 	bl	800094c <HAL_GetTick>
 8001ec0:	1bc0      	subs	r0, r0, r7
 8001ec2:	42a8      	cmp	r0, r5
 8001ec4:	d302      	bcc.n	8001ecc <HAL_SPI_Receive+0x10e>
 8001ec6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001eca:	d119      	bne.n	8001f00 <HAL_SPI_Receive+0x142>
 8001ecc:	b1c5      	cbz	r5, 8001f00 <HAL_SPI_Receive+0x142>
    while (hspi->RxXferCount > 0U)
 8001ece:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b1d3      	cbz	r3, 8001f0a <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	f012 0f01 	tst.w	r2, #1
 8001edc:	d0ee      	beq.n	8001ebc <HAL_SPI_Receive+0xfe>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ee4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001eea:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8001eee:	fa1f fc8c 	uxth.w	ip, ip
 8001ef2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001ef6:	fa1f fc8c 	uxth.w	ip, ip
 8001efa:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8001efe:	e7e6      	b.n	8001ece <HAL_SPI_Receive+0x110>
          hspi->State = HAL_SPI_STATE_READY;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001f06:	2603      	movs	r6, #3
          goto error;
 8001f08:	e00f      	b.n	8001f2a <HAL_SPI_Receive+0x16c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff fcac 	bl	800186c <SPI_EndRxTransaction>
 8001f14:	b108      	cbz	r0, 8001f1a <HAL_SPI_Receive+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f16:	2320      	movs	r3, #32
 8001f18:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f1c:	b92b      	cbnz	r3, 8001f2a <HAL_SPI_Receive+0x16c>
    hspi->State = HAL_SPI_STATE_READY;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f24:	2600      	movs	r6, #0
 8001f26:	e000      	b.n	8001f2a <HAL_SPI_Receive+0x16c>
    errorcode = HAL_BUSY;
 8001f28:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001f30:	4630      	mov	r0, r6
 8001f32:	b003      	add	sp, #12
 8001f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8001f38:	2602      	movs	r6, #2
 8001f3a:	e7f9      	b.n	8001f30 <HAL_SPI_Receive+0x172>

08001f3c <memset>:
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4402      	add	r2, r0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <memset+0xa>
 8001f44:	4770      	bx	lr
 8001f46:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4a:	e7f9      	b.n	8001f40 <memset+0x4>

08001f4c <__libc_init_array>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	2600      	movs	r6, #0
 8001f50:	4d0c      	ldr	r5, [pc, #48]	; (8001f84 <__libc_init_array+0x38>)
 8001f52:	4c0d      	ldr	r4, [pc, #52]	; (8001f88 <__libc_init_array+0x3c>)
 8001f54:	1b64      	subs	r4, r4, r5
 8001f56:	10a4      	asrs	r4, r4, #2
 8001f58:	42a6      	cmp	r6, r4
 8001f5a:	d109      	bne.n	8001f70 <__libc_init_array+0x24>
 8001f5c:	f000 f81a 	bl	8001f94 <_init>
 8001f60:	2600      	movs	r6, #0
 8001f62:	4d0a      	ldr	r5, [pc, #40]	; (8001f8c <__libc_init_array+0x40>)
 8001f64:	4c0a      	ldr	r4, [pc, #40]	; (8001f90 <__libc_init_array+0x44>)
 8001f66:	1b64      	subs	r4, r4, r5
 8001f68:	10a4      	asrs	r4, r4, #2
 8001f6a:	42a6      	cmp	r6, r4
 8001f6c:	d105      	bne.n	8001f7a <__libc_init_array+0x2e>
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f74:	4798      	blx	r3
 8001f76:	3601      	adds	r6, #1
 8001f78:	e7ee      	b.n	8001f58 <__libc_init_array+0xc>
 8001f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7e:	4798      	blx	r3
 8001f80:	3601      	adds	r6, #1
 8001f82:	e7f2      	b.n	8001f6a <__libc_init_array+0x1e>
 8001f84:	08001fd0 	.word	0x08001fd0
 8001f88:	08001fd0 	.word	0x08001fd0
 8001f8c:	08001fd0 	.word	0x08001fd0
 8001f90:	08001fd4 	.word	0x08001fd4

08001f94 <_init>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	bf00      	nop
 8001f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9a:	bc08      	pop	{r3}
 8001f9c:	469e      	mov	lr, r3
 8001f9e:	4770      	bx	lr

08001fa0 <_fini>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	bf00      	nop
 8001fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa6:	bc08      	pop	{r3}
 8001fa8:	469e      	mov	lr, r3
 8001faa:	4770      	bx	lr
