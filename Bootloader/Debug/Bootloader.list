
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d1c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f24  08001f24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f24  08001f24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f24  08001f24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f24  08001f24  00011f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000010  08001f38  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08001f38  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c21  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bcc  00000000  00000000  00027c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  00029868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000592  00000000  00000000  00029fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074de  00000000  00000000  0002a532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000238a  00000000  00000000  00031a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000122c  00000000  00000000  00033d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00002bf2  00000000  00000000  00034fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00037bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	08001ee8 	.word	0x08001ee8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	08001ee8 	.word	0x08001ee8

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000228:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	2400      	movs	r4, #0
 800022c:	9404      	str	r4, [sp, #16]
 800022e:	9405      	str	r4, [sp, #20]
 8000230:	9406      	str	r4, [sp, #24]
 8000232:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <MX_GPIO_Init+0x98>)
 8000236:	699a      	ldr	r2, [r3, #24]
 8000238:	f042 0210 	orr.w	r2, r2, #16
 800023c:	619a      	str	r2, [r3, #24]
 800023e:	699a      	ldr	r2, [r3, #24]
 8000240:	f002 0210 	and.w	r2, r2, #16
 8000244:	9201      	str	r2, [sp, #4]
 8000246:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	699a      	ldr	r2, [r3, #24]
 800024a:	f042 0220 	orr.w	r2, r2, #32
 800024e:	619a      	str	r2, [r3, #24]
 8000250:	699a      	ldr	r2, [r3, #24]
 8000252:	f002 0220 	and.w	r2, r2, #32
 8000256:	9202      	str	r2, [sp, #8]
 8000258:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	699a      	ldr	r2, [r3, #24]
 800025c:	f042 0204 	orr.w	r2, r2, #4
 8000260:	619a      	str	r2, [r3, #24]
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	9303      	str	r3, [sp, #12]
 800026a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 800026c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80002c0 <MX_GPIO_Init+0x9c>
 8000270:	4622      	mov	r2, r4
 8000272:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000276:	4640      	mov	r0, r8
 8000278:	f000 feaa 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_flash_GPIO_Port, CS_flash_Pin, GPIO_PIN_RESET);
 800027c:	4d11      	ldr	r5, [pc, #68]	; (80002c4 <MX_GPIO_Init+0xa0>)
 800027e:	4622      	mov	r2, r4
 8000280:	2110      	movs	r1, #16
 8000282:	4628      	mov	r0, r5
 8000284:	f000 fea4 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = G_LED_Pin|R_LED_Pin;
 8000288:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800028c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2701      	movs	r7, #1
 8000290:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2602      	movs	r6, #2
 8000296:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000298:	a904      	add	r1, sp, #16
 800029a:	4640      	mov	r0, r8
 800029c:	f000 fce4 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_flash_Pin;
 80002a0:	2310      	movs	r3, #16
 80002a2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(CS_flash_GPIO_Port, &GPIO_InitStruct);
 80002aa:	eb0d 0103 	add.w	r1, sp, r3
 80002ae:	4628      	mov	r0, r5
 80002b0:	f000 fcda 	bl	8000c68 <HAL_GPIO_Init>

}
 80002b4:	b008      	add	sp, #32
 80002b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40011000 	.word	0x40011000
 80002c4:	40010800 	.word	0x40010800

080002c8 <set_cs_flash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_cs_flash(void) {
 80002c8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, CS_flash_Pin, GPIO_PIN_RESET); //CS LOW
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4802      	ldr	r0, [pc, #8]	; (80002d8 <set_cs_flash+0x10>)
 80002d0:	f000 fe7e 	bl	8000fd0 <HAL_GPIO_WritePin>
}
 80002d4:	bd08      	pop	{r3, pc}
 80002d6:	bf00      	nop
 80002d8:	40010800 	.word	0x40010800

080002dc <deset_cs_flash>:

void deset_cs_flash(void) {
 80002dc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, CS_flash_Pin, GPIO_PIN_SET); //CS HIGH
 80002de:	2201      	movs	r2, #1
 80002e0:	2110      	movs	r1, #16
 80002e2:	4802      	ldr	r0, [pc, #8]	; (80002ec <deset_cs_flash+0x10>)
 80002e4:	f000 fe74 	bl	8000fd0 <HAL_GPIO_WritePin>
}
 80002e8:	bd08      	pop	{r3, pc}
 80002ea:	bf00      	nop
 80002ec:	40010800 	.word	0x40010800

080002f0 <spi_r>:

void spi_r(uint8_t *data, uint16_t size) {
 80002f0:	b508      	push	{r3, lr}
 80002f2:	460a      	mov	r2, r1
	HAL_SPI_Receive(&hspi1, data, size, HAL_MAX_DELAY);
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
 80002f8:	4601      	mov	r1, r0
 80002fa:	4802      	ldr	r0, [pc, #8]	; (8000304 <spi_r+0x14>)
 80002fc:	f001 fd09 	bl	8001d12 <HAL_SPI_Receive>
}
 8000300:	bd08      	pop	{r3, pc}
 8000302:	bf00      	nop
 8000304:	2000002c 	.word	0x2000002c

08000308 <spi_w>:

void spi_w(uint8_t *b, uint16_t size) {
 8000308:	b508      	push	{r3, lr}
 800030a:	460a      	mov	r2, r1
	HAL_SPI_Transmit(&hspi1, b, size, HAL_MAX_DELAY);
 800030c:	f04f 33ff 	mov.w	r3, #4294967295
 8000310:	4601      	mov	r1, r0
 8000312:	4802      	ldr	r0, [pc, #8]	; (800031c <spi_w+0x14>)
 8000314:	f001 faff 	bl	8001916 <HAL_SPI_Transmit>
}
 8000318:	bd08      	pop	{r3, pc}
 800031a:	bf00      	nop
 800031c:	2000002c 	.word	0x2000002c

08000320 <writeEnable_eflash>:
void writeEnable_eflash() {
 8000320:	b500      	push	{lr}
 8000322:	b083      	sub	sp, #12
	uint8_t frm = WRITEEN_INS;
 8000324:	2306      	movs	r3, #6
 8000326:	f88d 3007 	strb.w	r3, [sp, #7]
	set_cs_flash();
 800032a:	f7ff ffcd 	bl	80002c8 <set_cs_flash>
	spi_w(&frm, 1);
 800032e:	2101      	movs	r1, #1
 8000330:	f10d 0007 	add.w	r0, sp, #7
 8000334:	f7ff ffe8 	bl	8000308 <spi_w>
	deset_cs_flash();
 8000338:	f7ff ffd0 	bl	80002dc <deset_cs_flash>
}
 800033c:	b003      	add	sp, #12
 800033e:	f85d fb04 	ldr.w	pc, [sp], #4

08000342 <check_eflash_status>:
uint8_t check_eflash_status() {
 8000342:	b500      	push	{lr}
 8000344:	b083      	sub	sp, #12
	set_cs_flash();
 8000346:	f7ff ffbf 	bl	80002c8 <set_cs_flash>
	uint8_t frm = 0x05;
 800034a:	2305      	movs	r3, #5
 800034c:	f88d 3007 	strb.w	r3, [sp, #7]
	spi_w(&frm, 1);
 8000350:	2101      	movs	r1, #1
 8000352:	f10d 0007 	add.w	r0, sp, #7
 8000356:	f7ff ffd7 	bl	8000308 <spi_w>
	uint8_t status = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	f88d 3006 	strb.w	r3, [sp, #6]
	spi_r(&status, 1);
 8000360:	2101      	movs	r1, #1
 8000362:	f10d 0006 	add.w	r0, sp, #6
 8000366:	f7ff ffc3 	bl	80002f0 <spi_r>
	deset_cs_flash();
 800036a:	f7ff ffb7 	bl	80002dc <deset_cs_flash>
	return (status & 0x01);
 800036e:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8000372:	f000 0001 	and.w	r0, r0, #1
 8000376:	b003      	add	sp, #12
 8000378:	f85d fb04 	ldr.w	pc, [sp], #4

0800037c <waitforeflash>:
void waitforeflash() {
 800037c:	b538      	push	{r3, r4, r5, lr}
	int trys = 0;
	uint8_t stats = check_eflash_status();
 800037e:	f7ff ffe0 	bl	8000342 <check_eflash_status>
 8000382:	4604      	mov	r4, r0
	int trys = 0;
 8000384:	2500      	movs	r5, #0
	while (stats != 0) {
 8000386:	e000      	b.n	800038a <waitforeflash+0xe>

		if (trys > 100) {
			writeEnable_eflash();
			trys = 0;
		}
		trys++;
 8000388:	3501      	adds	r5, #1
	while (stats != 0) {
 800038a:	b15c      	cbz	r4, 80003a4 <waitforeflash+0x28>
		HAL_Delay(1);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fa95 	bl	80008bc <HAL_Delay>
		stats = check_eflash_status();
 8000392:	f7ff ffd6 	bl	8000342 <check_eflash_status>
 8000396:	4604      	mov	r4, r0
		if (trys > 100) {
 8000398:	2d64      	cmp	r5, #100	; 0x64
 800039a:	ddf5      	ble.n	8000388 <waitforeflash+0xc>
			writeEnable_eflash();
 800039c:	f7ff ffc0 	bl	8000320 <writeEnable_eflash>
			trys = 0;
 80003a0:	2500      	movs	r5, #0
 80003a2:	e7f1      	b.n	8000388 <waitforeflash+0xc>
	}
}
 80003a4:	bd38      	pop	{r3, r4, r5, pc}

080003a6 <read_eflash>:
void read_eflash(uint8_t *data, uint32_t *address, uint8_t ins, uint16_t size) {
 80003a6:	b530      	push	{r4, r5, lr}
 80003a8:	b083      	sub	sp, #12
 80003aa:	4604      	mov	r4, r0
 80003ac:	461d      	mov	r5, r3
	uint8_t *addr16 = ((uint8_t*) address) + 2;
	uint8_t *addr8 = ((uint8_t*) address) + 1;
	uint8_t *addr0 = ((uint8_t*) address);
	uint8_t frm[4] = { ins, *addr16, *addr8, *addr0 };
 80003ae:	f88d 2004 	strb.w	r2, [sp, #4]
 80003b2:	788b      	ldrb	r3, [r1, #2]
 80003b4:	f88d 3005 	strb.w	r3, [sp, #5]
 80003b8:	784b      	ldrb	r3, [r1, #1]
 80003ba:	f88d 3006 	strb.w	r3, [sp, #6]
 80003be:	780b      	ldrb	r3, [r1, #0]
 80003c0:	f88d 3007 	strb.w	r3, [sp, #7]
	set_cs_flash();
 80003c4:	f7ff ff80 	bl	80002c8 <set_cs_flash>
	spi_w((uint8_t*) &frm, 4);
 80003c8:	2104      	movs	r1, #4
 80003ca:	eb0d 0001 	add.w	r0, sp, r1
 80003ce:	f7ff ff9b 	bl	8000308 <spi_w>
	spi_r(data, size);
 80003d2:	4629      	mov	r1, r5
 80003d4:	4620      	mov	r0, r4
 80003d6:	f7ff ff8b 	bl	80002f0 <spi_r>
	deset_cs_flash();
 80003da:	f7ff ff7f 	bl	80002dc <deset_cs_flash>
}
 80003de:	b003      	add	sp, #12
 80003e0:	bd30      	pop	{r4, r5, pc}

080003e2 <Erase_eflash_sectors>:
	writeEnable_eflash();
	set_cs_flash();
	spi_w((uint8_t*) &buff, 260);
	deset_cs_flash();
}
void Erase_eflash_sectors(uint32_t *from_address, uint32_t *to_address) {
 80003e2:	b530      	push	{r4, r5, lr}
 80003e4:	b083      	sub	sp, #12
 80003e6:	460d      	mov	r5, r1
	uint32_t address = *from_address;
 80003e8:	6804      	ldr	r4, [r0, #0]
	while (1) {
		uint8_t *addr16 = ((uint8_t*) &address) + 2;
		uint8_t *addr8 = ((uint8_t*) &address) + 1;
		uint8_t *addr0 = ((uint8_t*) &address);
		uint8_t frm[4] = { 0x20, *addr16, *addr8, *addr0 };
 80003ea:	2320      	movs	r3, #32
 80003ec:	f88d 3004 	strb.w	r3, [sp, #4]
 80003f0:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80003f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80003f8:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80003fc:	f88d 3006 	strb.w	r3, [sp, #6]
 8000400:	f88d 4007 	strb.w	r4, [sp, #7]
		writeEnable_eflash();
 8000404:	f7ff ff8c 	bl	8000320 <writeEnable_eflash>
		set_cs_flash();
 8000408:	f7ff ff5e 	bl	80002c8 <set_cs_flash>
		spi_w((uint8_t*) &frm, 4);
 800040c:	2104      	movs	r1, #4
 800040e:	eb0d 0001 	add.w	r0, sp, r1
 8000412:	f7ff ff79 	bl	8000308 <spi_w>
		deset_cs_flash();
 8000416:	f7ff ff61 	bl	80002dc <deset_cs_flash>
		waitforeflash();
 800041a:	f7ff ffaf 	bl	800037c <waitforeflash>
		if ((*to_address <= (address + 4096)))
 800041e:	682b      	ldr	r3, [r5, #0]
 8000420:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8e0      	bhi.n	80003ea <Erase_eflash_sectors+0x8>
			break;
		address += 4096;
	}
}
 8000428:	b003      	add	sp, #12
 800042a:	bd30      	pop	{r4, r5, pc}

0800042c <erase>:
		return 1;
	else
		return 0;
}
//erase address
uint32_t erase(uint32_t *addr, uint8_t np) {
 800042c:	b500      	push	{lr}
 800042e:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000430:	2300      	movs	r3, #0
 8000432:	9302      	str	r3, [sp, #8]
	eraseInit.PageAddress = *addr;
 8000434:	6802      	ldr	r2, [r0, #0]
 8000436:	9204      	str	r2, [sp, #16]
	eraseInit.NbPages = np;
 8000438:	9105      	str	r1, [sp, #20]
	uint32_t sectorError = 0;
 800043a:	9301      	str	r3, [sp, #4]
	HAL_FLASHEx_Erase(&eraseInit, &sectorError);
 800043c:	a901      	add	r1, sp, #4
 800043e:	a802      	add	r0, sp, #8
 8000440:	f000 fbc0 	bl	8000bc4 <HAL_FLASHEx_Erase>
	return sectorError;
}
 8000444:	9801      	ldr	r0, [sp, #4]
 8000446:	b007      	add	sp, #28
 8000448:	f85d fb04 	ldr.w	pc, [sp], #4

0800044c <flashPage>:
//flashing
void flashPage(uint32_t *addr, uint8_t *data) {
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4606      	mov	r6, r0
 8000450:	460d      	mov	r5, r1
	// Write the data into the Flash memory
	for (int i = 0; i < 256; i += 2) {
 8000452:	2400      	movs	r4, #0
 8000454:	e00b      	b.n	800046e <flashPage+0x22>
		uint16_t halfword = (*(data + i + 1) << 8) | *(data + i);
 8000456:	1c63      	adds	r3, r4, #1
 8000458:	5cea      	ldrb	r2, [r5, r3]
 800045a:	5d2b      	ldrb	r3, [r5, r4]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, *addr + i, halfword);
 800045c:	6831      	ldr	r1, [r6, #0]
 800045e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8000462:	2300      	movs	r3, #0
 8000464:	4421      	add	r1, r4
 8000466:	2001      	movs	r0, #1
 8000468:	f000 fb38 	bl	8000adc <HAL_FLASH_Program>
	for (int i = 0; i < 256; i += 2) {
 800046c:	3402      	adds	r4, #2
 800046e:	2cff      	cmp	r4, #255	; 0xff
 8000470:	ddf1      	ble.n	8000456 <flashPage+0xa>
	}
}
 8000472:	bd70      	pop	{r4, r5, r6, pc}

08000474 <checkUpdateFlags>:


uint8_t checkUpdateFlags() {
 8000474:	b500      	push	{lr}
 8000476:	b083      	sub	sp, #12
	uint8_t data = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t addr = UPDATE_FLAG_ADDR;
 800047e:	f44f 237f 	mov.w	r3, #1044480	; 0xff000
 8000482:	9300      	str	r3, [sp, #0]
	uint8_t flag = READ_INS;
	read_eflash((uint8_t*) &data, &addr, flag, 1);
 8000484:	2301      	movs	r3, #1
 8000486:	2203      	movs	r2, #3
 8000488:	4669      	mov	r1, sp
 800048a:	f10d 0007 	add.w	r0, sp, #7
 800048e:	f7ff ff8a 	bl	80003a6 <read_eflash>
	return data;
}
 8000492:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000496:	b003      	add	sp, #12
 8000498:	f85d fb04 	ldr.w	pc, [sp], #4

0800049c <EraseUpdateFlags>:
uint8_t EraseUpdateFlags() {
 800049c:	b500      	push	{lr}
 800049e:	b083      	sub	sp, #12
	uint32_t addr = UPDATE_FLAG_ADDR;
 80004a0:	f44f 237f 	mov.w	r3, #1044480	; 0xff000
 80004a4:	9301      	str	r3, [sp, #4]
	uint32_t toaddr = UPDATE_FLAG_ADDR + 50;
 80004a6:	3332      	adds	r3, #50	; 0x32
 80004a8:	9300      	str	r3, [sp, #0]
	Erase_eflash_sectors(&addr, &toaddr);
 80004aa:	4669      	mov	r1, sp
 80004ac:	a801      	add	r0, sp, #4
 80004ae:	f7ff ff98 	bl	80003e2 <Erase_eflash_sectors>
	return 0;
}
 80004b2:	2000      	movs	r0, #0
 80004b4:	b003      	add	sp, #12
 80004b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004bc <Update>:
// The update process
uint8_t Update() {
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	b0c5      	sub	sp, #276	; 0x114
	// Unlocking process of the microcontroller's flash
	__HAL_FLASH_CLEAR_FLAG(
 80004c0:	4b20      	ldr	r3, [pc, #128]	; (8000544 <Update+0x88>)
 80004c2:	2234      	movs	r2, #52	; 0x34
 80004c4:	60da      	str	r2, [r3, #12]
			FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR); // Clear any pending flags
	HAL_FLASH_Unlock(); // Unlock the flash
 80004c6:	f000 fab1 	bl	8000a2c <HAL_FLASH_Unlock>
	uint32_t saddr = 0x8003B00;
 80004ca:	4c1f      	ldr	r4, [pc, #124]	; (8000548 <Update+0x8c>)
 80004cc:	9443      	str	r4, [sp, #268]	; 0x10c
	// Erase the flash
	erase(&saddr, 118);
 80004ce:	2176      	movs	r1, #118	; 0x76
 80004d0:	a843      	add	r0, sp, #268	; 0x10c
 80004d2:	f7ff ffab 	bl	800042c <erase>
	uint32_t addrt = UPDATE_ADDR;
 80004d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004da:	9342      	str	r3, [sp, #264]	; 0x108
	uint32_t addrf = FLASH_ADDR;
 80004dc:	9441      	str	r4, [sp, #260]	; 0x104
	uint32_t offset = 0;
 80004de:	2500      	movs	r5, #0
 80004e0:	e026      	b.n	8000530 <Update+0x74>
	uint8_t data[256];
	while (1) {
		for (int i = 0; i < 256; i++) {
			// Reading 256 bytes from external flash
			read_eflash(((uint8_t*) &data) + i, &addrt, (uint8_t) READ_INS, 1);
 80004e2:	2301      	movs	r3, #1
 80004e4:	2203      	movs	r2, #3
 80004e6:	a942      	add	r1, sp, #264	; 0x108
 80004e8:	a801      	add	r0, sp, #4
 80004ea:	4420      	add	r0, r4
 80004ec:	f7ff ff5b 	bl	80003a6 <read_eflash>
			addrt++;
 80004f0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80004f2:	3301      	adds	r3, #1
 80004f4:	9342      	str	r3, [sp, #264]	; 0x108
		for (int i = 0; i < 256; i++) {
 80004f6:	3401      	adds	r4, #1
 80004f8:	2cff      	cmp	r4, #255	; 0xff
 80004fa:	ddf2      	ble.n	80004e2 <Update+0x26>
		}
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET); //LED HIGH
 80004fc:	4c13      	ldr	r4, [pc, #76]	; (800054c <Update+0x90>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000504:	4620      	mov	r0, r4
 8000506:	f000 fd63 	bl	8000fd0 <HAL_GPIO_WritePin>
		// Write the 256 bytes into the embedded flash
		flashPage(&addrf, data);
 800050a:	a901      	add	r1, sp, #4
 800050c:	a841      	add	r0, sp, #260	; 0x104
 800050e:	f7ff ff9d 	bl	800044c <flashPage>
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET); //LED HIGH
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000518:	4620      	mov	r0, r4
 800051a:	f000 fd59 	bl	8000fd0 <HAL_GPIO_WritePin>
		offset += 256;
 800051e:	f505 7580 	add.w	r5, r5, #256	; 0x100
		addrf += 256;
 8000522:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000524:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000528:	9341      	str	r3, [sp, #260]	; 0x104
		if (offset >= 242000)
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <Update+0x94>)
 800052c:	429d      	cmp	r5, r3
 800052e:	d801      	bhi.n	8000534 <Update+0x78>
		for (int i = 0; i < 256; i++) {
 8000530:	2400      	movs	r4, #0
 8000532:	e7e1      	b.n	80004f8 <Update+0x3c>
			break;
	}
	// Lock the flash
	HAL_FLASH_Lock();
 8000534:	f000 fa94 	bl	8000a60 <HAL_FLASH_Lock>
	// Undo the update flag
	EraseUpdateFlags();
 8000538:	f7ff ffb0 	bl	800049c <EraseUpdateFlags>
	return 0;
}
 800053c:	2000      	movs	r0, #0
 800053e:	b045      	add	sp, #276	; 0x114
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000
 8000548:	08003b00 	.word	0x08003b00
 800054c:	40011000 	.word	0x40011000
 8000550:	0003b14f 	.word	0x0003b14f

08000554 <JumpToAddress>:
// Jump to ROM
typedef void (*pFunction)(void);
void JumpToAddress(uint32_t addr) {
 8000554:	b538      	push	{r3, r4, r5, lr}
 8000556:	4604      	mov	r4, r0
	uint32_t JumpAddress = *(uint32_t*) (addr + 4);
 8000558:	6845      	ldr	r5, [r0, #4]
	pFunction Jump = (pFunction) JumpAddress;
	HAL_SPI_DeInit(&hspi1);
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <JumpToAddress+0x30>)
 800055c:	f001 f9c5 	bl	80018ea <HAL_SPI_DeInit>
	HAL_RCC_DeInit();
 8000560:	f000 fd52 	bl	8001008 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000564:	f000 f950 	bl	8000808 <HAL_DeInit>
	SysTick->CTRL = 0;
 8000568:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
	SysTick->LOAD = 0;
 8000570:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 8000572:	619a      	str	r2, [r3, #24]

	SCB->VTOR = addr;
 8000574:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8000578:	609c      	str	r4, [r3, #8]
	__set_MSP(*(uint32_t*) addr);
 800057a:	6823      	ldr	r3, [r4, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800057c:	f383 8808 	msr	MSP, r3
	Jump();
 8000580:	47a8      	blx	r5
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	2000002c 	.word	0x2000002c

08000588 <Boot>:
// Boot Process
void Boot() {
 8000588:	b508      	push	{r3, lr}
	// Check for Update
	if (checkUpdateFlags() != 0xFF) {
 800058a:	f7ff ff73 	bl	8000474 <checkUpdateFlags>
 800058e:	28ff      	cmp	r0, #255	; 0xff
 8000590:	d103      	bne.n	800059a <Boot+0x12>
		Update();
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
	}
	// Jump to ROM
	JumpToAddress(FLASH_ADDR);
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <Boot+0x24>)
 8000594:	f7ff ffde 	bl	8000554 <JumpToAddress>
}
 8000598:	bd08      	pop	{r3, pc}
		Update();
 800059a:	f7ff ff8f 	bl	80004bc <Update>
		HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <Boot+0x28>)
 80005a6:	f000 fd13 	bl	8000fd0 <HAL_GPIO_WritePin>
 80005aa:	e7f2      	b.n	8000592 <Boot+0xa>
 80005ac:	08003b00 	.word	0x08003b00
 80005b0:	40011000 	.word	0x40011000

080005b4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005b6:	e7fe      	b.n	80005b6 <Error_Handler+0x2>

080005b8 <SystemClock_Config>:
void SystemClock_Config(void) {
 80005b8:	b500      	push	{lr}
 80005ba:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005bc:	2228      	movs	r2, #40	; 0x28
 80005be:	2100      	movs	r1, #0
 80005c0:	a806      	add	r0, sp, #24
 80005c2:	f001 fc65 	bl	8001e90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	9303      	str	r3, [sp, #12]
 80005ce:	9304      	str	r3, [sp, #16]
 80005d0:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	2201      	movs	r2, #1
 80005d4:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005da:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2202      	movs	r2, #2
 80005e0:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e8:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ea:	a806      	add	r0, sp, #24
 80005ec:	f000 fd86 	bl	80010fc <HAL_RCC_OscConfig>
 80005f0:	b980      	cbnz	r0, 8000614 <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2102      	movs	r1, #2
 80005f8:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000602:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000606:	a801      	add	r0, sp, #4
 8000608:	f000 ffaa 	bl	8001560 <HAL_RCC_ClockConfig>
 800060c:	b920      	cbnz	r0, 8000618 <SystemClock_Config+0x60>
}
 800060e:	b011      	add	sp, #68	; 0x44
 8000610:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000614:	f7ff ffce 	bl	80005b4 <Error_Handler>
		Error_Handler();
 8000618:	f7ff ffcc 	bl	80005b4 <Error_Handler>

0800061c <main>:
int main(void) {
 800061c:	b508      	push	{r3, lr}
	HAL_Init();
 800061e:	f000 f929 	bl	8000874 <HAL_Init>
	HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET); //LED HIGH
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <main+0x44>)
 800062a:	f000 fcd1 	bl	8000fd0 <HAL_GPIO_WritePin>
	SystemClock_Config();
 800062e:	f7ff ffc3 	bl	80005b8 <SystemClock_Config>
	MX_GPIO_Init();
 8000632:	f7ff fdf7 	bl	8000224 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000636:	f000 f819 	bl	800066c <MX_SPI1_Init>
	HAL_Delay(50);
 800063a:	2032      	movs	r0, #50	; 0x32
 800063c:	f000 f93e 	bl	80008bc <HAL_Delay>
	Boot();
 8000640:	f7ff ffa2 	bl	8000588 <Boot>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000644:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000648:	4906      	ldr	r1, [pc, #24]	; (8000664 <main+0x48>)
 800064a:	68ca      	ldr	r2, [r1, #12]
 800064c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <main+0x4c>)
 8000652:	4313      	orrs	r3, r2
 8000654:	60cb      	str	r3, [r1, #12]
 8000656:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800065a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800065c:	e7fd      	b.n	800065a <main+0x3e>
 800065e:	bf00      	nop
 8000660:	40011000 	.word	0x40011000
 8000664:	e000ed00 	.word	0xe000ed00
 8000668:	05fa0004 	.word	0x05fa0004

0800066c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800066c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800066e:	480e      	ldr	r0, [pc, #56]	; (80006a8 <MX_SPI1_Init+0x3c>)
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_SPI1_Init+0x40>)
 8000672:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000674:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000678:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800067a:	2300      	movs	r3, #0
 800067c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000680:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000682:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800068a:	2208      	movs	r2, #8
 800068c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000690:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000692:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000694:	230a      	movs	r3, #10
 8000696:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000698:	f001 f8cc 	bl	8001834 <HAL_SPI_Init>
 800069c:	b900      	cbnz	r0, 80006a0 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800069e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006a0:	f7ff ff88 	bl	80005b4 <Error_Handler>
}
 80006a4:	e7fb      	b.n	800069e <MX_SPI1_Init+0x32>
 80006a6:	bf00      	nop
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	40013000 	.word	0x40013000

080006b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006b0:	b510      	push	{r4, lr}
 80006b2:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	2300      	movs	r3, #0
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	9303      	str	r3, [sp, #12]
 80006ba:	9304      	str	r3, [sp, #16]
 80006bc:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 80006be:	6802      	ldr	r2, [r0, #0]
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_SPI_MspInit+0x6c>)
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d001      	beq.n	80006ca <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006c6:	b006      	add	sp, #24
 80006c8:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ca:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006d4:	619a      	str	r2, [r3, #24]
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80006dc:	9200      	str	r2, [sp, #0]
 80006de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	699a      	ldr	r2, [r3, #24]
 80006e2:	f042 0204 	orr.w	r2, r2, #4
 80006e6:	619a      	str	r2, [r3, #24]
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006f2:	23a0      	movs	r3, #160	; 0xa0
 80006f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	4c08      	ldr	r4, [pc, #32]	; (8000720 <HAL_SPI_MspInit+0x70>)
 8000700:	a902      	add	r1, sp, #8
 8000702:	4620      	mov	r0, r4
 8000704:	f000 fab0 	bl	8000c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	a902      	add	r1, sp, #8
 8000714:	4620      	mov	r0, r4
 8000716:	f000 faa7 	bl	8000c68 <HAL_GPIO_Init>
}
 800071a:	e7d4      	b.n	80006c6 <HAL_SPI_MspInit+0x16>
 800071c:	40013000 	.word	0x40013000
 8000720:	40010800 	.word	0x40010800

08000724 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000724:	b508      	push	{r3, lr}

  if(spiHandle->Instance==SPI1)
 8000726:	6802      	ldr	r2, [r0, #0]
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_SPI_MspDeInit+0x20>)
 800072a:	429a      	cmp	r2, r3
 800072c:	d000      	beq.n	8000730 <HAL_SPI_MspDeInit+0xc>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 800072e:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000730:	4a05      	ldr	r2, [pc, #20]	; (8000748 <HAL_SPI_MspDeInit+0x24>)
 8000732:	6993      	ldr	r3, [r2, #24]
 8000734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000738:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800073a:	21e0      	movs	r1, #224	; 0xe0
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <HAL_SPI_MspDeInit+0x28>)
 800073e:	f000 fbb3 	bl	8000ea8 <HAL_GPIO_DeInit>
}
 8000742:	e7f4      	b.n	800072e <HAL_SPI_MspDeInit+0xa>
 8000744:	40013000 	.word	0x40013000
 8000748:	40021000 	.word	0x40021000
 800074c:	40010800 	.word	0x40010800

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_MspInit+0x2c>)
 8000754:	699a      	ldr	r2, [r3, #24]
 8000756:	f042 0201 	orr.w	r2, r2, #1
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	699a      	ldr	r2, [r3, #24]
 800075e:	f002 0201 	and.w	r2, r2, #1
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	69da      	ldr	r2, [r3, #28]
 8000768:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800076c:	61da      	str	r2, [r3, #28]
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000778:	b002      	add	sp, #8
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000

08000780 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler>

08000782 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler>

08000784 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler>

08000786 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler>

08000788 <UsageFault_Handler>:
 8000788:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800078c:	4905      	ldr	r1, [pc, #20]	; (80007a4 <UsageFault_Handler+0x1c>)
 800078e:	68ca      	ldr	r2, [r1, #12]
 8000790:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <UsageFault_Handler+0x20>)
 8000796:	4313      	orrs	r3, r2
 8000798:	60cb      	str	r3, [r1, #12]
 800079a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800079e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80007a0:	e7fd      	b.n	800079e <UsageFault_Handler+0x16>
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	05fa0004 	.word	0x05fa0004

080007ac <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	4770      	bx	lr

080007ae <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 f870 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	bd08      	pop	{r3, pc}

080007ba <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ba:	4770      	bx	lr

080007bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007bc:	f7ff fffd 	bl	80007ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007c2:	490c      	ldr	r1, [pc, #48]	; (80007f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d8:	4c09      	ldr	r4, [pc, #36]	; (8000800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f001 fb5b 	bl	8001ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ea:	f7ff ff17 	bl	800061c <main>
  bx lr
 80007ee:	4770      	bx	lr
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f8:	08001f2c 	.word	0x08001f2c
  ldr r2, =_sbss
 80007fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000800:	200000a8 	.word	0x200000a8

08000804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_2_IRQHandler>

08000806 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000806:	4770      	bx	lr

08000808 <HAL_DeInit>:
{
 8000808:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_DeInit+0x1c>)
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000812:	2400      	movs	r4, #0
 8000814:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 8000816:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000818:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800081a:	f7ff fff4 	bl	8000806 <HAL_MspDeInit>
}
 800081e:	4620      	mov	r0, r4
 8000820:	bd10      	pop	{r4, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b510      	push	{r4, lr}
 800082a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_InitTick+0x40>)
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000834:	fbb3 f3f2 	udiv	r3, r3, r2
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <HAL_InitTick+0x44>)
 800083a:	6810      	ldr	r0, [r2, #0]
 800083c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000840:	f000 f89a 	bl	8000978 <HAL_SYSTICK_Config>
 8000844:	b968      	cbnz	r0, 8000862 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	2c0f      	cmp	r4, #15
 8000848:	d901      	bls.n	800084e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800084a:	2001      	movs	r0, #1
 800084c:	e00a      	b.n	8000864 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084e:	2200      	movs	r2, #0
 8000850:	4621      	mov	r1, r4
 8000852:	f04f 30ff 	mov.w	r0, #4294967295
 8000856:	f000 f857 	bl	8000908 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_InitTick+0x48>)
 800085c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2000      	movs	r0, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000862:	2001      	movs	r0, #1
}
 8000864:	bd10      	pop	{r4, pc}
 8000866:	bf00      	nop
 8000868:	20000004 	.word	0x20000004
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008

08000874 <HAL_Init>:
{
 8000874:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x20>)
 8000878:	6813      	ldr	r3, [r2, #0]
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 f82f 	bl	80008e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	200f      	movs	r0, #15
 8000888:	f7ff ffce 	bl	8000828 <HAL_InitTick>
  HAL_MspInit();
 800088c:	f7ff ff60 	bl	8000750 <HAL_MspInit>
}
 8000890:	2000      	movs	r0, #0
 8000892:	bd08      	pop	{r3, pc}
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <HAL_IncTick+0x10>)
 800089a:	6811      	ldr	r1, [r2, #0]
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_IncTick+0x14>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	440b      	add	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000084 	.word	0x20000084
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008b0:	4b01      	ldr	r3, [pc, #4]	; (80008b8 <HAL_GetTick+0x8>)
 80008b2:	6818      	ldr	r0, [r3, #0]
}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000084 	.word	0x20000084

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b538      	push	{r3, r4, r5, lr}
 80008be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff fff6 	bl	80008b0 <HAL_GetTick>
 80008c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008ca:	d002      	beq.n	80008d2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <HAL_Delay+0x24>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d2:	f7ff ffed 	bl	80008b0 <HAL_GetTick>
 80008d6:	1b40      	subs	r0, r0, r5
 80008d8:	42a0      	cmp	r0, r4
 80008da:	d3fa      	bcc.n	80008d2 <HAL_Delay+0x16>
  {
  }
}
 80008dc:	bd38      	pop	{r3, r4, r5, pc}
 80008de:	bf00      	nop
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008ec:	041b      	lsls	r3, r3, #16
 80008ee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f0:	0200      	lsls	r0, r0, #8
 80008f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000900:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000908:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_NVIC_SetPriority+0x68>)
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000912:	f1c3 0c07 	rsb	ip, r3, #7
 8000916:	f1bc 0f04 	cmp.w	ip, #4
 800091a:	bf28      	it	cs
 800091c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000920:	f103 0e04 	add.w	lr, r3, #4
 8000924:	f1be 0f06 	cmp.w	lr, #6
 8000928:	d918      	bls.n	800095c <HAL_NVIC_SetPriority+0x54>
 800092a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 3eff 	mov.w	lr, #4294967295
 8000930:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000934:	ea21 010c 	bic.w	r1, r1, ip
 8000938:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093a:	fa0e fe03 	lsl.w	lr, lr, r3
 800093e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000942:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000944:	2800      	cmp	r0, #0
 8000946:	db0b      	blt.n	8000960 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000950:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000954:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000958:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095c:	2300      	movs	r3, #0
 800095e:	e7e5      	b.n	800092c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	f000 000f 	and.w	r0, r0, #15
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_NVIC_SetPriority+0x6c>)
 800096a:	541a      	strb	r2, [r3, r0]
 800096c:	e7f4      	b.n	8000958 <HAL_NVIC_SetPriority+0x50>
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00
 8000974:	e000ed14 	.word	0xe000ed14

08000978 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	3801      	subs	r0, #1
 800097a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800097e:	d20b      	bcs.n	8000998 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000980:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000984:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <HAL_SYSTICK_Config+0x24>)
 8000988:	21f0      	movs	r1, #240	; 0xf0
 800098a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098e:	2000      	movs	r0, #0
 8000990:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	2207      	movs	r2, #7
 8000994:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000996:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000998:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <FLASH_Program_HalfWord+0x14>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <FLASH_Program_HalfWord+0x18>)
 80009a8:	6913      	ldr	r3, [r2, #16]
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80009b0:	8001      	strh	r1, [r0, #0]
}
 80009b2:	4770      	bx	lr
 80009b4:	20000088 	.word	0x20000088
 80009b8:	40022000 	.word	0x40022000

080009bc <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <FLASH_SetErrorCode+0x68>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	f013 0310 	ands.w	r3, r3, #16
 80009c4:	d005      	beq.n	80009d2 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <FLASH_SetErrorCode+0x6c>)
 80009c8:	69d3      	ldr	r3, [r2, #28]
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80009d0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <FLASH_SetErrorCode+0x68>)
 80009d4:	68d2      	ldr	r2, [r2, #12]
 80009d6:	f012 0f04 	tst.w	r2, #4
 80009da:	d006      	beq.n	80009ea <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009dc:	4912      	ldr	r1, [pc, #72]	; (8000a28 <FLASH_SetErrorCode+0x6c>)
 80009de:	69ca      	ldr	r2, [r1, #28]
 80009e0:	f042 0201 	orr.w	r2, r2, #1
 80009e4:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80009e6:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <FLASH_SetErrorCode+0x68>)
 80009ec:	69d2      	ldr	r2, [r2, #28]
 80009ee:	f012 0f01 	tst.w	r2, #1
 80009f2:	d009      	beq.n	8000a08 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <FLASH_SetErrorCode+0x6c>)
 80009f6:	69ca      	ldr	r2, [r1, #28]
 80009f8:	f042 0204 	orr.w	r2, r2, #4
 80009fc:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009fe:	4909      	ldr	r1, [pc, #36]	; (8000a24 <FLASH_SetErrorCode+0x68>)
 8000a00:	69ca      	ldr	r2, [r1, #28]
 8000a02:	f022 0201 	bic.w	r2, r2, #1
 8000a06:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a08:	f240 1201 	movw	r2, #257	; 0x101
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d002      	beq.n	8000a16 <FLASH_SetErrorCode+0x5a>
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <FLASH_SetErrorCode+0x68>)
 8000a12:	60d3      	str	r3, [r2, #12]
}  
 8000a14:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a16:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <FLASH_SetErrorCode+0x68>)
 8000a18:	69d3      	ldr	r3, [r2, #28]
 8000a1a:	f023 0301 	bic.w	r3, r3, #1
 8000a1e:	61d3      	str	r3, [r2, #28]
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000
 8000a28:	20000088 	.word	0x20000088

08000a2c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_FLASH_Unlock+0x2c>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000a34:	d00b      	beq.n	8000a4e <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_FLASH_Unlock+0x2c>)
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_FLASH_Unlock+0x30>)
 8000a3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a3c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000a40:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000a48:	d103      	bne.n	8000a52 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	2000      	movs	r0, #0
 8000a50:	4770      	bx	lr
      status = HAL_ERROR;
 8000a52:	2001      	movs	r0, #1
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40022000 	.word	0x40022000
 8000a5c:	45670123 	.word	0x45670123

08000a60 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <HAL_FLASH_Lock+0x10>)
 8000a62:	6913      	ldr	r3, [r2, #16]
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6113      	str	r3, [r2, #16]
}
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40022000 	.word	0x40022000

08000a74 <FLASH_WaitForLastOperation>:
{
 8000a74:	b538      	push	{r3, r4, r5, lr}
 8000a76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff ff1a 	bl	80008b0 <HAL_GetTick>
 8000a7c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <FLASH_WaitForLastOperation+0x64>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	f013 0f01 	tst.w	r3, #1
 8000a86:	d00a      	beq.n	8000a9e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000a88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a8c:	d0f7      	beq.n	8000a7e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a8e:	b124      	cbz	r4, 8000a9a <FLASH_WaitForLastOperation+0x26>
 8000a90:	f7ff ff0e 	bl	80008b0 <HAL_GetTick>
 8000a94:	1b40      	subs	r0, r0, r5
 8000a96:	42a0      	cmp	r0, r4
 8000a98:	d9f1      	bls.n	8000a7e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	e01b      	b.n	8000ad6 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <FLASH_WaitForLastOperation+0x64>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	f013 0f20 	tst.w	r3, #32
 8000aa6:	d002      	beq.n	8000aae <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <FLASH_WaitForLastOperation+0x64>)
 8000aaa:	2220      	movs	r2, #32
 8000aac:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <FLASH_WaitForLastOperation+0x64>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	f013 0f10 	tst.w	r3, #16
 8000ab6:	d10b      	bne.n	8000ad0 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <FLASH_WaitForLastOperation+0x64>)
 8000aba:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000abc:	f013 0f01 	tst.w	r3, #1
 8000ac0:	d106      	bne.n	8000ad0 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <FLASH_WaitForLastOperation+0x64>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ac6:	f013 0f04 	tst.w	r3, #4
 8000aca:	d101      	bne.n	8000ad0 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8000acc:	2000      	movs	r0, #0
 8000ace:	e002      	b.n	8000ad6 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8000ad0:	f7ff ff74 	bl	80009bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ad4:	2001      	movs	r0, #1
}
 8000ad6:	bd38      	pop	{r3, r4, r5, pc}
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_FLASH_Program>:
{
 8000adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ae0:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_FLASH_Program+0x98>)
 8000ae4:	7e1b      	ldrb	r3, [r3, #24]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d041      	beq.n	8000b6e <HAL_FLASH_Program+0x92>
 8000aea:	4604      	mov	r4, r0
 8000aec:	460f      	mov	r7, r1
 8000aee:	4690      	mov	r8, r2
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_FLASH_Program+0x98>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000af6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000afa:	f7ff ffbb 	bl	8000a74 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000afe:	4603      	mov	r3, r0
 8000b00:	bb78      	cbnz	r0, 8000b62 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b02:	2c01      	cmp	r4, #1
 8000b04:	d008      	beq.n	8000b18 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b06:	2c02      	cmp	r4, #2
 8000b08:	d003      	beq.n	8000b12 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 8000b0a:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000b0e:	461c      	mov	r4, r3
 8000b10:	e007      	b.n	8000b22 <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 8000b12:	f04f 0902 	mov.w	r9, #2
 8000b16:	e7fa      	b.n	8000b0e <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000b18:	f04f 0901 	mov.w	r9, #1
 8000b1c:	e7f7      	b.n	8000b0e <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 8000b1e:	3401      	adds	r4, #1
 8000b20:	b2e4      	uxtb	r4, r4
 8000b22:	454c      	cmp	r4, r9
 8000b24:	d21d      	bcs.n	8000b62 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b26:	0121      	lsls	r1, r4, #4
 8000b28:	f1c1 0220 	rsb	r2, r1, #32
 8000b2c:	f1a1 0320 	sub.w	r3, r1, #32
 8000b30:	fa28 f101 	lsr.w	r1, r8, r1
 8000b34:	fa06 f202 	lsl.w	r2, r6, r2
 8000b38:	4311      	orrs	r1, r2
 8000b3a:	fa26 f303 	lsr.w	r3, r6, r3
 8000b3e:	4319      	orrs	r1, r3
 8000b40:	b289      	uxth	r1, r1
 8000b42:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000b46:	f7ff ff2b 	bl	80009a0 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b4e:	f7ff ff91 	bl	8000a74 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_FLASH_Program+0x9c>)
 8000b54:	691d      	ldr	r5, [r3, #16]
 8000b56:	f025 0501 	bic.w	r5, r5, #1
 8000b5a:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d0dd      	beq.n	8000b1e <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_FLASH_Program+0x98>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	7611      	strb	r1, [r2, #24]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000b6e:	2302      	movs	r3, #2
 8000b70:	e7fa      	b.n	8000b68 <HAL_FLASH_Program+0x8c>
 8000b72:	bf00      	nop
 8000b74:	20000088 	.word	0x20000088
 8000b78:	40022000 	.word	0x40022000

08000b7c <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <FLASH_MassErase+0x1c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <FLASH_MassErase+0x20>)
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	f042 0204 	orr.w	r2, r2, #4
 8000b8a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b8c:	691a      	ldr	r2, [r3, #16]
 8000b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b92:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000088 	.word	0x20000088
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <FLASH_PageErase+0x1c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <FLASH_PageErase+0x20>)
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	f042 0202 	orr.w	r2, r2, #2
 8000bae:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000bb0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bb8:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000bba:	4770      	bx	lr
 8000bbc:	20000088 	.word	0x20000088
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <HAL_FLASHEx_Erase+0x9c>)
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d046      	beq.n	8000c5a <HAL_FLASHEx_Erase+0x96>
{
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	4605      	mov	r5, r0
 8000bd0:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_FLASHEx_Erase+0x9c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bd8:	6803      	ldr	r3, [r0, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d020      	beq.n	8000c20 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000be2:	f7ff ff47 	bl	8000a74 <FLASH_WaitForLastOperation>
 8000be6:	bb90      	cbnz	r0, 8000c4e <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000bee:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bf0:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000bf2:	68ea      	ldr	r2, [r5, #12]
 8000bf4:	68ab      	ldr	r3, [r5, #8]
 8000bf6:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d928      	bls.n	8000c50 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff ffce 	bl	8000ba0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c08:	f7ff ff34 	bl	8000a74 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_FLASHEx_Erase+0xa0>)
 8000c0e:	6913      	ldr	r3, [r2, #16]
 8000c10:	f023 0302 	bic.w	r3, r3, #2
 8000c14:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000c16:	4601      	mov	r1, r0
 8000c18:	b9b8      	cbnz	r0, 8000c4a <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8000c1a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8000c1e:	e7e8      	b.n	8000bf2 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c24:	f7ff ff26 	bl	8000a74 <FLASH_WaitForLastOperation>
 8000c28:	b108      	cbz	r0, 8000c2e <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	e010      	b.n	8000c50 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ffa4 	bl	8000b7c <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c38:	f7ff ff1c 	bl	8000a74 <FLASH_WaitForLastOperation>
 8000c3c:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_FLASHEx_Erase+0xa0>)
 8000c40:	6913      	ldr	r3, [r2, #16]
 8000c42:	f023 0304 	bic.w	r3, r3, #4
 8000c46:	6113      	str	r3, [r2, #16]
 8000c48:	e002      	b.n	8000c50 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8000c4a:	6034      	str	r4, [r6, #0]
            break;
 8000c4c:	e000      	b.n	8000c50 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c4e:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_FLASHEx_Erase+0x9c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	761a      	strb	r2, [r3, #24]
}
 8000c56:	4608      	mov	r0, r1
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000c5a:	2102      	movs	r1, #2
}
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	20000088 	.word	0x20000088
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c6c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000c6e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c70:	e0b0      	b.n	8000dd4 <HAL_GPIO_Init+0x16c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	4d87      	ldr	r5, [pc, #540]	; (8000e90 <HAL_GPIO_Init+0x228>)
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	d010      	beq.n	8000c9a <HAL_GPIO_Init+0x32>
 8000c78:	d907      	bls.n	8000c8a <HAL_GPIO_Init+0x22>
 8000c7a:	4d86      	ldr	r5, [pc, #536]	; (8000e94 <HAL_GPIO_Init+0x22c>)
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	d00c      	beq.n	8000c9a <HAL_GPIO_Init+0x32>
 8000c80:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	d008      	beq.n	8000c9a <HAL_GPIO_Init+0x32>
 8000c88:	e013      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
 8000c8a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000c8e:	42ab      	cmp	r3, r5
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x32>
 8000c92:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	d107      	bne.n	8000caa <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c9a:	688b      	ldr	r3, [r1, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d062      	beq.n	8000d66 <HAL_GPIO_Init+0xfe>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d05b      	beq.n	8000d5c <HAL_GPIO_Init+0xf4>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000ca4:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca6:	2408      	movs	r4, #8
 8000ca8:	e003      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000caa:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000cae:	42ab      	cmp	r3, r5
 8000cb0:	d0f3      	beq.n	8000c9a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000cb6:	d858      	bhi.n	8000d6a <HAL_GPIO_Init+0x102>
 8000cb8:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cba:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000cbe:	d856      	bhi.n	8000d6e <HAL_GPIO_Init+0x106>
 8000cc0:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc4:	6833      	ldr	r3, [r6, #0]
 8000cc6:	250f      	movs	r5, #15
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	ea23 0305 	bic.w	r3, r3, r5
 8000cce:	fa04 f202 	lsl.w	r2, r4, r2
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd6:	684b      	ldr	r3, [r1, #4]
 8000cd8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000cdc:	d078      	beq.n	8000dd0 <HAL_GPIO_Init+0x168>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cde:	4b6e      	ldr	r3, [pc, #440]	; (8000e98 <HAL_GPIO_Init+0x230>)
 8000ce0:	699a      	ldr	r2, [r3, #24]
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	619a      	str	r2, [r3, #24]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000cf2:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000cf6:	1c95      	adds	r5, r2, #2
 8000cf8:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_GPIO_Init+0x234>)
 8000cfa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cfe:	f00c 0503 	and.w	r5, ip, #3
 8000d02:	00ad      	lsls	r5, r5, #2
 8000d04:	230f      	movs	r3, #15
 8000d06:	40ab      	lsls	r3, r5
 8000d08:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0c:	4b64      	ldr	r3, [pc, #400]	; (8000ea0 <HAL_GPIO_Init+0x238>)
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d033      	beq.n	8000d7a <HAL_GPIO_Init+0x112>
 8000d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d16:	4298      	cmp	r0, r3
 8000d18:	f000 8098 	beq.w	8000e4c <HAL_GPIO_Init+0x1e4>
 8000d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d20:	4298      	cmp	r0, r3
 8000d22:	f000 8095 	beq.w	8000e50 <HAL_GPIO_Init+0x1e8>
 8000d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	f000 8092 	beq.w	8000e54 <HAL_GPIO_Init+0x1ec>
 8000d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d34:	4298      	cmp	r0, r3
 8000d36:	f000 808f 	beq.w	8000e58 <HAL_GPIO_Init+0x1f0>
 8000d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d019      	beq.n	8000d76 <HAL_GPIO_Init+0x10e>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e01a      	b.n	8000d7c <HAL_GPIO_Init+0x114>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d46:	68cc      	ldr	r4, [r1, #12]
          break;
 8000d48:	e7b3      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d4a:	68cc      	ldr	r4, [r1, #12]
 8000d4c:	3404      	adds	r4, #4
          break;
 8000d4e:	e7b0      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d50:	68cc      	ldr	r4, [r1, #12]
 8000d52:	3408      	adds	r4, #8
          break;
 8000d54:	e7ad      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d56:	68cc      	ldr	r4, [r1, #12]
 8000d58:	340c      	adds	r4, #12
          break;
 8000d5a:	e7aa      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000d5c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5e:	2408      	movs	r4, #8
 8000d60:	e7a7      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d62:	2400      	movs	r4, #0
 8000d64:	e7a5      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d66:	2404      	movs	r4, #4
 8000d68:	e7a3      	b.n	8000cb2 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d6a:	1d06      	adds	r6, r0, #4
 8000d6c:	e7a5      	b.n	8000cba <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d6e:	f1ac 0208 	sub.w	r2, ip, #8
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	e7a6      	b.n	8000cc4 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d76:	2305      	movs	r3, #5
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_Init+0x114>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	40ab      	lsls	r3, r5
 8000d7e:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000d80:	3202      	adds	r2, #2
 8000d82:	4d46      	ldr	r5, [pc, #280]	; (8000e9c <HAL_GPIO_Init+0x234>)
 8000d84:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d88:	684b      	ldr	r3, [r1, #4]
 8000d8a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d8e:	d065      	beq.n	8000e5c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000d92:	6893      	ldr	r3, [r2, #8]
 8000d94:	ea43 030e 	orr.w	r3, r3, lr
 8000d98:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9a:	684b      	ldr	r3, [r1, #4]
 8000d9c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000da0:	d062      	beq.n	8000e68 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000da4:	68d3      	ldr	r3, [r2, #12]
 8000da6:	ea43 030e 	orr.w	r3, r3, lr
 8000daa:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dac:	684b      	ldr	r3, [r1, #4]
 8000dae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000db2:	d05f      	beq.n	8000e74 <HAL_GPIO_Init+0x20c>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db4:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000db6:	6853      	ldr	r3, [r2, #4]
 8000db8:	ea43 030e 	orr.w	r3, r3, lr
 8000dbc:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dbe:	684b      	ldr	r3, [r1, #4]
 8000dc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dc4:	d05c      	beq.n	8000e80 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc6:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	ea43 030e 	orr.w	r3, r3, lr
 8000dce:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000dd0:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd4:	680b      	ldr	r3, [r1, #0]
 8000dd6:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000dda:	d057      	beq.n	8000e8c <HAL_GPIO_Init+0x224>
    ioposition = (0x01uL << position);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000de6:	ea32 0303 	bics.w	r3, r2, r3
 8000dea:	d1f1      	bne.n	8000dd0 <HAL_GPIO_Init+0x168>
      switch (GPIO_Init->Mode)
 8000dec:	684b      	ldr	r3, [r1, #4]
 8000dee:	2b12      	cmp	r3, #18
 8000df0:	f63f af3f 	bhi.w	8000c72 <HAL_GPIO_Init+0xa>
 8000df4:	2b12      	cmp	r3, #18
 8000df6:	f63f af5c 	bhi.w	8000cb2 <HAL_GPIO_Init+0x4a>
 8000dfa:	a501      	add	r5, pc, #4	; (adr r5, 8000e00 <HAL_GPIO_Init+0x198>)
 8000dfc:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000e00:	08000c9b 	.word	0x08000c9b
 8000e04:	08000d47 	.word	0x08000d47
 8000e08:	08000d51 	.word	0x08000d51
 8000e0c:	08000d63 	.word	0x08000d63
 8000e10:	08000cb3 	.word	0x08000cb3
 8000e14:	08000cb3 	.word	0x08000cb3
 8000e18:	08000cb3 	.word	0x08000cb3
 8000e1c:	08000cb3 	.word	0x08000cb3
 8000e20:	08000cb3 	.word	0x08000cb3
 8000e24:	08000cb3 	.word	0x08000cb3
 8000e28:	08000cb3 	.word	0x08000cb3
 8000e2c:	08000cb3 	.word	0x08000cb3
 8000e30:	08000cb3 	.word	0x08000cb3
 8000e34:	08000cb3 	.word	0x08000cb3
 8000e38:	08000cb3 	.word	0x08000cb3
 8000e3c:	08000cb3 	.word	0x08000cb3
 8000e40:	08000cb3 	.word	0x08000cb3
 8000e44:	08000d4b 	.word	0x08000d4b
 8000e48:	08000d57 	.word	0x08000d57
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e795      	b.n	8000d7c <HAL_GPIO_Init+0x114>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e793      	b.n	8000d7c <HAL_GPIO_Init+0x114>
 8000e54:	2303      	movs	r3, #3
 8000e56:	e791      	b.n	8000d7c <HAL_GPIO_Init+0x114>
 8000e58:	2304      	movs	r3, #4
 8000e5a:	e78f      	b.n	8000d7c <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5c:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000e5e:	6893      	ldr	r3, [r2, #8]
 8000e60:	ea23 030e 	bic.w	r3, r3, lr
 8000e64:	6093      	str	r3, [r2, #8]
 8000e66:	e798      	b.n	8000d9a <HAL_GPIO_Init+0x132>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000e6a:	68d3      	ldr	r3, [r2, #12]
 8000e6c:	ea23 030e 	bic.w	r3, r3, lr
 8000e70:	60d3      	str	r3, [r2, #12]
 8000e72:	e79b      	b.n	8000dac <HAL_GPIO_Init+0x144>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000e76:	6853      	ldr	r3, [r2, #4]
 8000e78:	ea23 030e 	bic.w	r3, r3, lr
 8000e7c:	6053      	str	r3, [r2, #4]
 8000e7e:	e79e      	b.n	8000dbe <HAL_GPIO_Init+0x156>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e80:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_GPIO_Init+0x23c>)
 8000e82:	6813      	ldr	r3, [r2, #0]
 8000e84:	ea23 030e 	bic.w	r3, r3, lr
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e7a1      	b.n	8000dd0 <HAL_GPIO_Init+0x168>
  }
}
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
 8000e90:	10220000 	.word	0x10220000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8000ea8:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000eaa:	e081      	b.n	8000fb0 <HAL_GPIO_DeInit+0x108>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000eac:	f04f 0e05 	mov.w	lr, #5
 8000eb0:	e001      	b.n	8000eb6 <HAL_GPIO_DeInit+0xe>
 8000eb2:	f04f 0e00 	mov.w	lr, #0
 8000eb6:	fa0e f404 	lsl.w	r4, lr, r4
 8000eba:	4564      	cmp	r4, ip
 8000ebc:	d054      	beq.n	8000f68 <HAL_GPIO_DeInit+0xc0>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ebe:	2bff      	cmp	r3, #255	; 0xff
 8000ec0:	d86d      	bhi.n	8000f9e <HAL_GPIO_DeInit+0xf6>
 8000ec2:	4605      	mov	r5, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec4:	2bff      	cmp	r3, #255	; 0xff
 8000ec6:	d86c      	bhi.n	8000fa2 <HAL_GPIO_DeInit+0xfa>
 8000ec8:	ea4f 0e82 	mov.w	lr, r2, lsl #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000ecc:	682c      	ldr	r4, [r5, #0]
 8000ece:	f04f 0c0f 	mov.w	ip, #15
 8000ed2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000ed6:	ea24 040c 	bic.w	r4, r4, ip
 8000eda:	f04f 0c04 	mov.w	ip, #4
 8000ede:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000ee2:	ea44 040c 	orr.w	r4, r4, ip
 8000ee6:	602c      	str	r4, [r5, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000ee8:	68c4      	ldr	r4, [r0, #12]
 8000eea:	ea24 0303 	bic.w	r3, r4, r3
 8000eee:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8000ef0:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8000ef2:	fa31 f302 	lsrs.w	r3, r1, r2
 8000ef6:	d059      	beq.n	8000fac <HAL_GPIO_DeInit+0x104>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000ef8:	2301      	movs	r3, #1
 8000efa:	4093      	lsls	r3, r2
    if (iocurrent)
 8000efc:	400b      	ands	r3, r1
 8000efe:	d0f7      	beq.n	8000ef0 <HAL_GPIO_DeInit+0x48>
      tmp = AFIO->EXTICR[position >> 2u];
 8000f00:	0897      	lsrs	r7, r2, #2
 8000f02:	1cbd      	adds	r5, r7, #2
 8000f04:	4c2f      	ldr	r4, [pc, #188]	; (8000fc4 <HAL_GPIO_DeInit+0x11c>)
 8000f06:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f0a:	f002 0403 	and.w	r4, r2, #3
 8000f0e:	00a4      	lsls	r4, r4, #2
 8000f10:	f04f 0c0f 	mov.w	ip, #15
 8000f14:	fa0c f604 	lsl.w	r6, ip, r4
 8000f18:	ea06 0c05 	and.w	ip, r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f1c:	4d2a      	ldr	r5, [pc, #168]	; (8000fc8 <HAL_GPIO_DeInit+0x120>)
 8000f1e:	42a8      	cmp	r0, r5
 8000f20:	d0c7      	beq.n	8000eb2 <HAL_GPIO_DeInit+0xa>
 8000f22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f26:	42a8      	cmp	r0, r5
 8000f28:	d012      	beq.n	8000f50 <HAL_GPIO_DeInit+0xa8>
 8000f2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f2e:	42a8      	cmp	r0, r5
 8000f30:	d011      	beq.n	8000f56 <HAL_GPIO_DeInit+0xae>
 8000f32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f36:	42a8      	cmp	r0, r5
 8000f38:	d010      	beq.n	8000f5c <HAL_GPIO_DeInit+0xb4>
 8000f3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f3e:	42a8      	cmp	r0, r5
 8000f40:	d00f      	beq.n	8000f62 <HAL_GPIO_DeInit+0xba>
 8000f42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f46:	42a8      	cmp	r0, r5
 8000f48:	d0b0      	beq.n	8000eac <HAL_GPIO_DeInit+0x4>
 8000f4a:	f04f 0e06 	mov.w	lr, #6
 8000f4e:	e7b2      	b.n	8000eb6 <HAL_GPIO_DeInit+0xe>
 8000f50:	f04f 0e01 	mov.w	lr, #1
 8000f54:	e7af      	b.n	8000eb6 <HAL_GPIO_DeInit+0xe>
 8000f56:	f04f 0e02 	mov.w	lr, #2
 8000f5a:	e7ac      	b.n	8000eb6 <HAL_GPIO_DeInit+0xe>
 8000f5c:	f04f 0e03 	mov.w	lr, #3
 8000f60:	e7a9      	b.n	8000eb6 <HAL_GPIO_DeInit+0xe>
 8000f62:	f04f 0e04 	mov.w	lr, #4
 8000f66:	e7a6      	b.n	8000eb6 <HAL_GPIO_DeInit+0xe>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000f68:	4c18      	ldr	r4, [pc, #96]	; (8000fcc <HAL_GPIO_DeInit+0x124>)
 8000f6a:	6825      	ldr	r5, [r4, #0]
 8000f6c:	ea25 0503 	bic.w	r5, r5, r3
 8000f70:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000f72:	6865      	ldr	r5, [r4, #4]
 8000f74:	ea25 0503 	bic.w	r5, r5, r3
 8000f78:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000f7a:	68e5      	ldr	r5, [r4, #12]
 8000f7c:	ea25 0503 	bic.w	r5, r5, r3
 8000f80:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000f82:	68a5      	ldr	r5, [r4, #8]
 8000f84:	ea25 0503 	bic.w	r5, r5, r3
 8000f88:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000f8a:	f8df c038 	ldr.w	ip, [pc, #56]	; 8000fc4 <HAL_GPIO_DeInit+0x11c>
 8000f8e:	1cbc      	adds	r4, r7, #2
 8000f90:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8000f94:	ea25 0506 	bic.w	r5, r5, r6
 8000f98:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8000f9c:	e78f      	b.n	8000ebe <HAL_GPIO_DeInit+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f9e:	1d05      	adds	r5, r0, #4
 8000fa0:	e790      	b.n	8000ec4 <HAL_GPIO_DeInit+0x1c>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fa2:	f1a2 0e08 	sub.w	lr, r2, #8
 8000fa6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000faa:	e78f      	b.n	8000ecc <HAL_GPIO_DeInit+0x24>
  }
}
 8000fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8000fae:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8000fb0:	fa31 f302 	lsrs.w	r3, r1, r2
 8000fb4:	d005      	beq.n	8000fc2 <HAL_GPIO_DeInit+0x11a>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4093      	lsls	r3, r2
    if (iocurrent)
 8000fba:	400b      	ands	r3, r1
 8000fbc:	d0f7      	beq.n	8000fae <HAL_GPIO_DeInit+0x106>
{
 8000fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc0:	e79e      	b.n	8000f00 <HAL_GPIO_DeInit+0x58>
 8000fc2:	4770      	bx	lr
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd0:	b10a      	cbz	r2, 8000fd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd2:	6101      	str	r1, [r0, #16]
 8000fd4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd6:	0409      	lsls	r1, r1, #16
 8000fd8:	6101      	str	r1, [r0, #16]
  }
}
 8000fda:	4770      	bx	lr

08000fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fdc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <RCC_Delay+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <RCC_Delay+0x28>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	0a5b      	lsrs	r3, r3, #9
 8000fea:	fb00 f303 	mul.w	r3, r0, r3
 8000fee:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000ff0:	bf00      	nop
  }
  while (Delay --);
 8000ff2:	9b01      	ldr	r3, [sp, #4]
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	9201      	str	r2, [sp, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f9      	bne.n	8000ff0 <RCC_Delay+0x14>
}
 8000ffc:	b002      	add	sp, #8
 8000ffe:	4770      	bx	lr
 8001000:	20000000 	.word	0x20000000
 8001004:	10624dd3 	.word	0x10624dd3

08001008 <HAL_RCC_DeInit>:
{
 8001008:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 800100a:	f7ff fc51 	bl	80008b0 <HAL_GetTick>
 800100e:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001010:	4a36      	ldr	r2, [pc, #216]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f013 0f02 	tst.w	r3, #2
 8001022:	d107      	bne.n	8001034 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fc44 	bl	80008b0 <HAL_GetTick>
 8001028:	1b00      	subs	r0, r0, r4
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f5      	bls.n	800101a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 800102e:	2403      	movs	r4, #3
}
 8001030:	4620      	mov	r0, r4
 8001032:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001034:	4d2d      	ldr	r5, [pc, #180]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800103c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001040:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8001042:	f7ff fc35 	bl	80008b0 <HAL_GetTick>
 8001046:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8001048:	2300      	movs	r3, #0
 800104a:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f013 0f0c 	tst.w	r3, #12
 8001054:	d008      	beq.n	8001068 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001056:	f7ff fc2b 	bl	80008b0 <HAL_GetTick>
 800105a:	1b00      	subs	r0, r0, r4
 800105c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001060:	4298      	cmp	r0, r3
 8001062:	d9f3      	bls.n	800104c <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8001064:	2403      	movs	r4, #3
 8001066:	e7e3      	b.n	8001030 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <HAL_RCC_DeInit+0xe8>)
 800106a:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <HAL_RCC_DeInit+0xec>)
 800106c:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_RCC_DeInit+0xf0>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f7ff fbd9 	bl	8000828 <HAL_InitTick>
 8001076:	4604      	mov	r4, r0
 8001078:	b108      	cbz	r0, 800107e <HAL_RCC_DeInit+0x76>
    return HAL_ERROR;
 800107a:	2401      	movs	r4, #1
 800107c:	e7d8      	b.n	8001030 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800107e:	f7ff fc17 	bl	80008b0 <HAL_GetTick>
 8001082:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800108c:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001096:	d006      	beq.n	80010a6 <HAL_RCC_DeInit+0x9e>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001098:	f7ff fc0a 	bl	80008b0 <HAL_GetTick>
 800109c:	1b40      	subs	r0, r0, r5
 800109e:	2802      	cmp	r0, #2
 80010a0:	d9f5      	bls.n	800108e <HAL_RCC_DeInit+0x86>
      return HAL_TIMEOUT;
 80010a2:	2403      	movs	r4, #3
 80010a4:	e7c4      	b.n	8001030 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 80010a6:	4e11      	ldr	r6, [pc, #68]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 80010a8:	2300      	movs	r3, #0
 80010aa:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 80010ac:	f7ff fc00 	bl	80008b0 <HAL_GetTick>
 80010b0:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80010b2:	6833      	ldr	r3, [r6, #0]
 80010b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010b8:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010c2:	d006      	beq.n	80010d2 <HAL_RCC_DeInit+0xca>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fbf4 	bl	80008b0 <HAL_GetTick>
 80010c8:	1b40      	subs	r0, r0, r5
 80010ca:	2864      	cmp	r0, #100	; 0x64
 80010cc:	d9f5      	bls.n	80010ba <HAL_RCC_DeInit+0xb2>
      return HAL_TIMEOUT;
 80010ce:	2403      	movs	r4, #3
 80010d0:	e7ae      	b.n	8001030 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_RCC_DeInit+0xe4>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010da:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80010dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010de:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80010e8:	e7a2      	b.n	8001030 <HAL_RCC_DeInit+0x28>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	20000000 	.word	0x20000000
 80010f4:	007a1200 	.word	0x007a1200
 80010f8:	20000008 	.word	0x20000008

080010fc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80010fc:	2800      	cmp	r0, #0
 80010fe:	f000 81f1 	beq.w	80014e4 <HAL_RCC_OscConfig+0x3e8>
{
 8001102:	b570      	push	{r4, r5, r6, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001108:	6803      	ldr	r3, [r0, #0]
 800110a:	f013 0f01 	tst.w	r3, #1
 800110e:	d02c      	beq.n	800116a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001110:	4b99      	ldr	r3, [pc, #612]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b04      	cmp	r3, #4
 800111a:	d01d      	beq.n	8001158 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800111c:	4b96      	ldr	r3, [pc, #600]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d012      	beq.n	800114e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001128:	6863      	ldr	r3, [r4, #4]
 800112a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112e:	d041      	beq.n	80011b4 <HAL_RCC_OscConfig+0xb8>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d155      	bne.n	80011e0 <HAL_RCC_OscConfig+0xe4>
 8001134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001138:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e037      	b.n	80011be <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800114e:	4b8a      	ldr	r3, [pc, #552]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001156:	d0e7      	beq.n	8001128 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4b87      	ldr	r3, [pc, #540]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001160:	d003      	beq.n	800116a <HAL_RCC_OscConfig+0x6e>
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 81bf 	beq.w	80014e8 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	f013 0f02 	tst.w	r3, #2
 8001170:	d075      	beq.n	800125e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001172:	4b81      	ldr	r3, [pc, #516]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f013 0f0c 	tst.w	r3, #12
 800117a:	d05f      	beq.n	800123c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800117c:	4b7e      	ldr	r3, [pc, #504]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d054      	beq.n	8001232 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001188:	6923      	ldr	r3, [r4, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 808a 	beq.w	80012a4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001190:	4b7a      	ldr	r3, [pc, #488]	; (800137c <HAL_RCC_OscConfig+0x280>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001196:	f7ff fb8b 	bl	80008b0 <HAL_GetTick>
 800119a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	4b76      	ldr	r3, [pc, #472]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f013 0f02 	tst.w	r3, #2
 80011a4:	d175      	bne.n	8001292 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fb83 	bl	80008b0 <HAL_GetTick>
 80011aa:	1b40      	subs	r0, r0, r5
 80011ac:	2802      	cmp	r0, #2
 80011ae:	d9f5      	bls.n	800119c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80011b0:	2003      	movs	r0, #3
 80011b2:	e19e      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	4a70      	ldr	r2, [pc, #448]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	b343      	cbz	r3, 8001214 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80011c2:	f7ff fb75 	bl	80008b0 <HAL_GetTick>
 80011c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c8:	4b6b      	ldr	r3, [pc, #428]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011d0:	d1cb      	bne.n	800116a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d2:	f7ff fb6d 	bl	80008b0 <HAL_GetTick>
 80011d6:	1b40      	subs	r0, r0, r5
 80011d8:	2864      	cmp	r0, #100	; 0x64
 80011da:	d9f5      	bls.n	80011c8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80011dc:	2003      	movs	r0, #3
 80011de:	e188      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e4:	d009      	beq.n	80011fa <HAL_RCC_OscConfig+0xfe>
 80011e6:	4b64      	ldr	r3, [pc, #400]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e7e1      	b.n	80011be <HAL_RCC_OscConfig+0xc2>
 80011fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011fe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e7d4      	b.n	80011be <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001214:	f7ff fb4c 	bl	80008b0 <HAL_GetTick>
 8001218:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001222:	d0a2      	beq.n	800116a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fb44 	bl	80008b0 <HAL_GetTick>
 8001228:	1b40      	subs	r0, r0, r5
 800122a:	2864      	cmp	r0, #100	; 0x64
 800122c:	d9f5      	bls.n	800121a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800122e:	2003      	movs	r0, #3
 8001230:	e15f      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001232:	4b51      	ldr	r3, [pc, #324]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800123a:	d1a5      	bne.n	8001188 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f013 0f02 	tst.w	r3, #2
 8001244:	d003      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001246:	6923      	ldr	r3, [r4, #16]
 8001248:	2b01      	cmp	r3, #1
 800124a:	f040 814f 	bne.w	80014ec <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4a4a      	ldr	r2, [pc, #296]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001256:	6961      	ldr	r1, [r4, #20]
 8001258:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800125c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	f013 0f08 	tst.w	r3, #8
 8001264:	d033      	beq.n	80012ce <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	69a3      	ldr	r3, [r4, #24]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d05c      	beq.n	8001326 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <HAL_RCC_OscConfig+0x280>)
 800126e:	2201      	movs	r2, #1
 8001270:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001274:	f7ff fb1c 	bl	80008b0 <HAL_GetTick>
 8001278:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f013 0f02 	tst.w	r3, #2
 8001282:	d121      	bne.n	80012c8 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fb14 	bl	80008b0 <HAL_GetTick>
 8001288:	1b40      	subs	r0, r0, r5
 800128a:	2802      	cmp	r0, #2
 800128c:	d9f5      	bls.n	800127a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e12f      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4a39      	ldr	r2, [pc, #228]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800129a:	6961      	ldr	r1, [r4, #20]
 800129c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e7dc      	b.n	800125e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80012a4:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_RCC_OscConfig+0x280>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb01 	bl	80008b0 <HAL_GetTick>
 80012ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f013 0f02 	tst.w	r3, #2
 80012b8:	d0d1      	beq.n	800125e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff faf9 	bl	80008b0 <HAL_GetTick>
 80012be:	1b40      	subs	r0, r0, r5
 80012c0:	2802      	cmp	r0, #2
 80012c2:	d9f5      	bls.n	80012b0 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80012c4:	2003      	movs	r0, #3
 80012c6:	e114      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff fe87 	bl	8000fdc <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	f013 0f04 	tst.w	r3, #4
 80012d4:	f000 8096 	beq.w	8001404 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012e0:	d134      	bne.n	800134c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ea:	61da      	str	r2, [r3, #28]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012f6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_RCC_OscConfig+0x284>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001300:	d026      	beq.n	8001350 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001302:	68e3      	ldr	r3, [r4, #12]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d03d      	beq.n	8001384 <HAL_RCC_OscConfig+0x288>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d153      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2b8>
 800130c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001310:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001314:	6a1a      	ldr	r2, [r3, #32]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	621a      	str	r2, [r3, #32]
 8001324:	e033      	b.n	800138e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_RCC_OscConfig+0x280>)
 8001328:	2200      	movs	r2, #0
 800132a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800132e:	f7ff fabf 	bl	80008b0 <HAL_GetTick>
 8001332:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f013 0f02 	tst.w	r3, #2
 800133c:	d0c7      	beq.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fab7 	bl	80008b0 <HAL_GetTick>
 8001342:	1b40      	subs	r0, r0, r5
 8001344:	2802      	cmp	r0, #2
 8001346:	d9f5      	bls.n	8001334 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8001348:	2003      	movs	r0, #3
 800134a:	e0d2      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 800134c:	2500      	movs	r5, #0
 800134e:	e7d3      	b.n	80012f8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x284>)
 8001352:	6813      	ldr	r3, [r2, #0]
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800135a:	f7ff faa9 	bl	80008b0 <HAL_GetTick>
 800135e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_RCC_OscConfig+0x284>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001368:	d1cb      	bne.n	8001302 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136a:	f7ff faa1 	bl	80008b0 <HAL_GetTick>
 800136e:	1b80      	subs	r0, r0, r6
 8001370:	2864      	cmp	r0, #100	; 0x64
 8001372:	d9f5      	bls.n	8001360 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001374:	2003      	movs	r0, #3
 8001376:	e0bc      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
 8001378:	40021000 	.word	0x40021000
 800137c:	42420000 	.word	0x42420000
 8001380:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	4a5f      	ldr	r2, [pc, #380]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 8001386:	6a13      	ldr	r3, [r2, #32]
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138e:	68e3      	ldr	r3, [r4, #12]
 8001390:	b333      	cbz	r3, 80013e0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001392:	f7ff fa8d 	bl	80008b0 <HAL_GetTick>
 8001396:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f013 0f02 	tst.w	r3, #2
 80013a0:	d12f      	bne.n	8001402 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff fa85 	bl	80008b0 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ac:	4298      	cmp	r0, r3
 80013ae:	d9f3      	bls.n	8001398 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80013b0:	2003      	movs	r0, #3
 80013b2:	e09e      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d009      	beq.n	80013cc <HAL_RCC_OscConfig+0x2d0>
 80013b8:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	621a      	str	r2, [r3, #32]
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	f022 0204 	bic.w	r2, r2, #4
 80013c8:	621a      	str	r2, [r3, #32]
 80013ca:	e7e0      	b.n	800138e <HAL_RCC_OscConfig+0x292>
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	f042 0204 	orr.w	r2, r2, #4
 80013d4:	621a      	str	r2, [r3, #32]
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	621a      	str	r2, [r3, #32]
 80013de:	e7d6      	b.n	800138e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 80013e0:	f7ff fa66 	bl	80008b0 <HAL_GetTick>
 80013e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	f013 0f02 	tst.w	r3, #2
 80013ee:	d008      	beq.n	8001402 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f0:	f7ff fa5e 	bl	80008b0 <HAL_GetTick>
 80013f4:	1b80      	subs	r0, r0, r6
 80013f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013fa:	4298      	cmp	r0, r3
 80013fc:	d9f3      	bls.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80013fe:	2003      	movs	r0, #3
 8001400:	e077      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001402:	b9e5      	cbnz	r5, 800143e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001404:	69e3      	ldr	r3, [r4, #28]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d072      	beq.n	80014f0 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800140a:	4a3e      	ldr	r2, [pc, #248]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 800140c:	6852      	ldr	r2, [r2, #4]
 800140e:	f002 020c 	and.w	r2, r2, #12
 8001412:	2a08      	cmp	r2, #8
 8001414:	d056      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001416:	2b02      	cmp	r3, #2
 8001418:	d017      	beq.n	800144a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x40c>)
 800141c:	2200      	movs	r2, #0
 800141e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001420:	f7ff fa46 	bl	80008b0 <HAL_GetTick>
 8001424:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800142e:	d047      	beq.n	80014c0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fa3e 	bl	80008b0 <HAL_GetTick>
 8001434:	1b00      	subs	r0, r0, r4
 8001436:	2802      	cmp	r0, #2
 8001438:	d9f5      	bls.n	8001426 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
 800143c:	e059      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800143e:	4a31      	ldr	r2, [pc, #196]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 8001440:	69d3      	ldr	r3, [r2, #28]
 8001442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001446:	61d3      	str	r3, [r2, #28]
 8001448:	e7dc      	b.n	8001404 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_RCC_OscConfig+0x40c>)
 800144c:	2200      	movs	r2, #0
 800144e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001450:	f7ff fa2e 	bl	80008b0 <HAL_GetTick>
 8001454:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800145e:	d006      	beq.n	800146e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fa26 	bl	80008b0 <HAL_GetTick>
 8001464:	1b40      	subs	r0, r0, r5
 8001466:	2802      	cmp	r0, #2
 8001468:	d9f5      	bls.n	8001456 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800146a:	2003      	movs	r0, #3
 800146c:	e041      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800146e:	6a23      	ldr	r3, [r4, #32]
 8001470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001474:	d01a      	beq.n	80014ac <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001476:	4923      	ldr	r1, [pc, #140]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 8001478:	684b      	ldr	r3, [r1, #4]
 800147a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800147e:	6a22      	ldr	r2, [r4, #32]
 8001480:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001482:	4302      	orrs	r2, r0
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_RCC_OscConfig+0x40c>)
 800148a:	2201      	movs	r2, #1
 800148c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800148e:	f7ff fa0f 	bl	80008b0 <HAL_GetTick>
 8001492:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800149c:	d10e      	bne.n	80014bc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fa07 	bl	80008b0 <HAL_GetTick>
 80014a2:	1b00      	subs	r0, r0, r4
 80014a4:	2802      	cmp	r0, #2
 80014a6:	d9f5      	bls.n	8001494 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80014a8:	2003      	movs	r0, #3
 80014aa:	e022      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ac:	4a15      	ldr	r2, [pc, #84]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 80014ae:	6853      	ldr	r3, [r2, #4]
 80014b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80014b4:	68a1      	ldr	r1, [r4, #8]
 80014b6:	430b      	orrs	r3, r1
 80014b8:	6053      	str	r3, [r2, #4]
 80014ba:	e7dc      	b.n	8001476 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80014bc:	2000      	movs	r0, #0
 80014be:	e018      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
 80014c0:	2000      	movs	r0, #0
 80014c2:	e016      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d016      	beq.n	80014f6 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_RCC_OscConfig+0x408>)
 80014ca:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014cc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80014d0:	6a22      	ldr	r2, [r4, #32]
 80014d2:	4291      	cmp	r1, r2
 80014d4:	d111      	bne.n	80014fa <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014d6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80014da:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014dc:	4293      	cmp	r3, r2
 80014de:	d10e      	bne.n	80014fe <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80014e0:	2000      	movs	r0, #0
 80014e2:	e006      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80014e4:	2001      	movs	r0, #1
}
 80014e6:	4770      	bx	lr
        return HAL_ERROR;
 80014e8:	2001      	movs	r0, #1
 80014ea:	e002      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80014f0:	2000      	movs	r0, #0
}
 80014f2:	b002      	add	sp, #8
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
 80014f8:	e7fb      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80014fa:	2001      	movs	r0, #1
 80014fc:	e7f9      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
 80014fe:	2001      	movs	r0, #1
 8001500:	e7f7      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f6>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	42420000 	.word	0x42420000

0800150c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_RCC_GetSysClockFreq+0x40>)
 800150e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001510:	f003 020c 	and.w	r2, r3, #12
 8001514:	2a08      	cmp	r2, #8
 8001516:	d001      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800151a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800151c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <HAL_RCC_GetSysClockFreq+0x48>)
 8001522:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001524:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_RCC_GetSysClockFreq+0x40>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_RCC_GetSysClockFreq+0x44>)
 8001538:	fb02 f000 	mul.w	r0, r2, r0
 800153c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001540:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_RCC_GetSysClockFreq+0x50>)
 8001544:	fb03 f000 	mul.w	r0, r3, r0
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	007a1200 	.word	0x007a1200
 8001554:	08001f10 	.word	0x08001f10
 8001558:	08001f20 	.word	0x08001f20
 800155c:	003d0900 	.word	0x003d0900

08001560 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001560:	2800      	cmp	r0, #0
 8001562:	f000 80a0 	beq.w	80016a6 <HAL_RCC_ClockConfig+0x146>
{
 8001566:	b570      	push	{r4, r5, r6, lr}
 8001568:	460d      	mov	r5, r1
 800156a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <HAL_RCC_ClockConfig+0x158>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	428b      	cmp	r3, r1
 8001576:	d20b      	bcs.n	8001590 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_RCC_ClockConfig+0x158>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	f023 0307 	bic.w	r3, r3, #7
 8001580:	430b      	orrs	r3, r1
 8001582:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	428b      	cmp	r3, r1
 800158c:	f040 808d 	bne.w	80016aa <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	f013 0f02 	tst.w	r3, #2
 8001596:	d017      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	f013 0f04 	tst.w	r3, #4
 800159c:	d004      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800159e:	4a47      	ldr	r2, [pc, #284]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 80015a0:	6853      	ldr	r3, [r2, #4]
 80015a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015a6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	f013 0f08 	tst.w	r3, #8
 80015ae:	d004      	beq.n	80015ba <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4a42      	ldr	r2, [pc, #264]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 80015b2:	6853      	ldr	r3, [r2, #4]
 80015b4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015b8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ba:	4a40      	ldr	r2, [pc, #256]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 80015bc:	6853      	ldr	r3, [r2, #4]
 80015be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015c2:	68a1      	ldr	r1, [r4, #8]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f013 0f01 	tst.w	r3, #1
 80015ce:	d031      	beq.n	8001634 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d0:	6863      	ldr	r3, [r4, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d020      	beq.n	8001618 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d025      	beq.n	8001626 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f012 0f02 	tst.w	r2, #2
 80015e2:	d064      	beq.n	80016ae <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e4:	4935      	ldr	r1, [pc, #212]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 80015e6:	684a      	ldr	r2, [r1, #4]
 80015e8:	f022 0203 	bic.w	r2, r2, #3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80015f0:	f7ff f95e 	bl	80008b0 <HAL_GetTick>
 80015f4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	6862      	ldr	r2, [r4, #4]
 8001600:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001604:	d016      	beq.n	8001634 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001606:	f7ff f953 	bl	80008b0 <HAL_GetTick>
 800160a:	1b80      	subs	r0, r0, r6
 800160c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001610:	4298      	cmp	r0, r3
 8001612:	d9f0      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001614:	2003      	movs	r0, #3
 8001616:	e045      	b.n	80016a4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001618:	4a28      	ldr	r2, [pc, #160]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001620:	d1e0      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001622:	2001      	movs	r0, #1
 8001624:	e03e      	b.n	80016a4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4a25      	ldr	r2, [pc, #148]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800162e:	d1d9      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001630:	2001      	movs	r0, #1
 8001632:	e037      	b.n	80016a4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_RCC_ClockConfig+0x158>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	42ab      	cmp	r3, r5
 800163e:	d90a      	bls.n	8001656 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_RCC_ClockConfig+0x158>)
 8001642:	6813      	ldr	r3, [r2, #0]
 8001644:	f023 0307 	bic.w	r3, r3, #7
 8001648:	432b      	orrs	r3, r5
 800164a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164c:	6813      	ldr	r3, [r2, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	42ab      	cmp	r3, r5
 8001654:	d12d      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	f013 0f04 	tst.w	r3, #4
 800165c:	d006      	beq.n	800166c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 8001660:	6853      	ldr	r3, [r2, #4]
 8001662:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001666:	68e1      	ldr	r1, [r4, #12]
 8001668:	430b      	orrs	r3, r1
 800166a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	f013 0f08 	tst.w	r3, #8
 8001672:	d007      	beq.n	8001684 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 8001676:	6853      	ldr	r3, [r2, #4]
 8001678:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800167c:	6921      	ldr	r1, [r4, #16]
 800167e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001682:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001684:	f7ff ff42 	bl	800150c <HAL_RCC_GetSysClockFreq>
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_RCC_ClockConfig+0x15c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_RCC_ClockConfig+0x160>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	40d8      	lsrs	r0, r3
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_ClockConfig+0x164>)
 8001698:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_ClockConfig+0x168>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f7ff f8c3 	bl	8000828 <HAL_InitTick>
  return HAL_OK;
 80016a2:	2000      	movs	r0, #0
}
 80016a4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
}
 80016a8:	4770      	bx	lr
    return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
 80016ac:	e7fa      	b.n	80016a4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80016ae:	2001      	movs	r0, #1
 80016b0:	e7f8      	b.n	80016a4 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80016b2:	2001      	movs	r0, #1
 80016b4:	e7f6      	b.n	80016a4 <HAL_RCC_ClockConfig+0x144>
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08001f00 	.word	0x08001f00
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008

080016cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80016cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	4605      	mov	r5, r0
 80016d4:	4688      	mov	r8, r1
 80016d6:	4617      	mov	r7, r2
 80016d8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80016da:	f7ff f8e9 	bl	80008b0 <HAL_GetTick>
 80016de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016e0:	1a1b      	subs	r3, r3, r0
 80016e2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80016e6:	f7ff f8e3 	bl	80008b0 <HAL_GetTick>
 80016ea:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80016f4:	fb09 f303 	mul.w	r3, r9, r3
 80016f8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016fa:	682b      	ldr	r3, [r5, #0]
 80016fc:	689c      	ldr	r4, [r3, #8]
 80016fe:	ea38 0404 	bics.w	r4, r8, r4
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	42bb      	cmp	r3, r7
 800170a:	d040      	beq.n	800178e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800170c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001710:	d0f3      	beq.n	80016fa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001712:	f7ff f8cd 	bl	80008b0 <HAL_GetTick>
 8001716:	eba0 000a 	sub.w	r0, r0, sl
 800171a:	4548      	cmp	r0, r9
 800171c:	d20a      	bcs.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x68>
 800171e:	f1b9 0f00 	cmp.w	r9, #0
 8001722:	d007      	beq.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001724:	9a01      	ldr	r2, [sp, #4]
 8001726:	b102      	cbz	r2, 800172a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8001728:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800172a:	9b01      	ldr	r3, [sp, #4]
 800172c:	3b01      	subs	r3, #1
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	4691      	mov	r9, r2
 8001732:	e7e2      	b.n	80016fa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001734:	682a      	ldr	r2, [r5, #0]
 8001736:	6853      	ldr	r3, [r2, #4]
 8001738:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800173c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800173e:	686b      	ldr	r3, [r5, #4]
 8001740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001744:	d00b      	beq.n	800175e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001746:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174c:	d014      	beq.n	8001778 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800174e:	2301      	movs	r3, #1
 8001750:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001754:	2300      	movs	r3, #0
 8001756:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800175a:	2003      	movs	r0, #3
 800175c:	e018      	b.n	8001790 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800175e:	68ab      	ldr	r3, [r5, #8]
 8001760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001764:	d002      	beq.n	800176c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	d1ec      	bne.n	8001746 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800176c:	682a      	ldr	r2, [r5, #0]
 800176e:	6813      	ldr	r3, [r2, #0]
 8001770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e7e6      	b.n	8001746 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8001778:	682a      	ldr	r2, [r5, #0]
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	682a      	ldr	r2, [r5, #0]
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e7df      	b.n	800174e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800178e:	2000      	movs	r0, #0
}
 8001790:	b002      	add	sp, #8
 8001792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001796:	bf00      	nop
 8001798:	20000000 	.word	0x20000000

0800179c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800179c:	b510      	push	{r4, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	4604      	mov	r4, r0
 80017a2:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017a4:	9200      	str	r2, [sp, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	f7ff ff8f 	bl	80016cc <SPI_WaitFlagStateUntilTimeout>
 80017ae:	b908      	cbnz	r0, 80017b4 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80017b0:	b002      	add	sp, #8
 80017b2:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80017bc:	2003      	movs	r0, #3
 80017be:	e7f7      	b.n	80017b0 <SPI_EndRxTxTransaction+0x14>

080017c0 <SPI_EndRxTransaction>:
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	4604      	mov	r4, r0
 80017c6:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017c8:	6841      	ldr	r1, [r0, #4]
 80017ca:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80017ce:	d010      	beq.n	80017f2 <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80017d0:	6861      	ldr	r1, [r4, #4]
 80017d2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80017d6:	d103      	bne.n	80017e0 <SPI_EndRxTransaction+0x20>
 80017d8:	68a1      	ldr	r1, [r4, #8]
 80017da:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80017de:	d015      	beq.n	800180c <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff ff70 	bl	80016cc <SPI_WaitFlagStateUntilTimeout>
 80017ec:	b9e0      	cbnz	r0, 8001828 <SPI_EndRxTransaction+0x68>
}
 80017ee:	b002      	add	sp, #8
 80017f0:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017f2:	6881      	ldr	r1, [r0, #8]
 80017f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80017f8:	d002      	beq.n	8001800 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80017fa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80017fe:	d1e7      	bne.n	80017d0 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8001800:	6820      	ldr	r0, [r4, #0]
 8001802:	6801      	ldr	r1, [r0, #0]
 8001804:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001808:	6001      	str	r1, [r0, #0]
 800180a:	e7e1      	b.n	80017d0 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	2101      	movs	r1, #1
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff ff5a 	bl	80016cc <SPI_WaitFlagStateUntilTimeout>
 8001818:	2800      	cmp	r0, #0
 800181a:	d0e8      	beq.n	80017ee <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800181c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001824:	2003      	movs	r0, #3
 8001826:	e7e2      	b.n	80017ee <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001828:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800182a:	f043 0320 	orr.w	r3, r3, #32
 800182e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001830:	2003      	movs	r0, #3
 8001832:	e7dc      	b.n	80017ee <SPI_EndRxTransaction+0x2e>

08001834 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001834:	2800      	cmp	r0, #0
 8001836:	d056      	beq.n	80018e6 <HAL_SPI_Init+0xb2>
{
 8001838:	b510      	push	{r4, lr}
 800183a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800183c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800183e:	b933      	cbnz	r3, 800184e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001840:	6843      	ldr	r3, [r0, #4]
 8001842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001846:	d005      	beq.n	8001854 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001848:	2300      	movs	r3, #0
 800184a:	61c3      	str	r3, [r0, #28]
 800184c:	e002      	b.n	8001854 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001852:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001858:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03c      	beq.n	80018da <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001860:	2302      	movs	r3, #2
 8001862:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800186e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001870:	6863      	ldr	r3, [r4, #4]
 8001872:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001876:	68a2      	ldr	r2, [r4, #8]
 8001878:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800187c:	4313      	orrs	r3, r2
 800187e:	68e2      	ldr	r2, [r4, #12]
 8001880:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001884:	4313      	orrs	r3, r2
 8001886:	6922      	ldr	r2, [r4, #16]
 8001888:	f002 0202 	and.w	r2, r2, #2
 800188c:	4313      	orrs	r3, r2
 800188e:	6962      	ldr	r2, [r4, #20]
 8001890:	f002 0201 	and.w	r2, r2, #1
 8001894:	4313      	orrs	r3, r2
 8001896:	69a2      	ldr	r2, [r4, #24]
 8001898:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800189c:	4313      	orrs	r3, r2
 800189e:	69e2      	ldr	r2, [r4, #28]
 80018a0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80018a4:	4313      	orrs	r3, r2
 80018a6:	6a22      	ldr	r2, [r4, #32]
 80018a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018ac:	4313      	orrs	r3, r2
 80018ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018b4:	6821      	ldr	r1, [r4, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018ba:	8b63      	ldrh	r3, [r4, #26]
 80018bc:	6822      	ldr	r2, [r4, #0]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	69d3      	ldr	r3, [r2, #28]
 80018c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018cc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018ce:	2000      	movs	r0, #0
 80018d0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80018d8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80018da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80018de:	4620      	mov	r0, r4
 80018e0:	f7fe fee6 	bl	80006b0 <HAL_SPI_MspInit>
 80018e4:	e7bc      	b.n	8001860 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80018e6:	2001      	movs	r0, #1
}
 80018e8:	4770      	bx	lr

080018ea <HAL_SPI_DeInit>:
  if (hspi == NULL)
 80018ea:	b190      	cbz	r0, 8001912 <HAL_SPI_DeInit+0x28>
{
 80018ec:	b510      	push	{r4, lr}
 80018ee:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 80018f0:	2302      	movs	r3, #2
 80018f2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80018f6:	6802      	ldr	r2, [r0, #0]
 80018f8:	6813      	ldr	r3, [r2, #0]
 80018fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018fe:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8001900:	f7fe ff10 	bl	8000724 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001904:	2000      	movs	r0, #0
 8001906:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8001908:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800190c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8001910:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
}
 8001914:	4770      	bx	lr

08001916 <HAL_SPI_Transmit>:
{
 8001916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800191e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001922:	2b01      	cmp	r3, #1
 8001924:	f000 80d1 	beq.w	8001aca <HAL_SPI_Transmit+0x1b4>
 8001928:	4604      	mov	r4, r0
 800192a:	4688      	mov	r8, r1
 800192c:	4691      	mov	r9, r2
 800192e:	2301      	movs	r3, #1
 8001930:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001934:	f7fe ffbc 	bl	80008b0 <HAL_GetTick>
 8001938:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800193a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 800193e:	b2f6      	uxtb	r6, r6
 8001940:	2e01      	cmp	r6, #1
 8001942:	f040 80ba 	bne.w	8001aba <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 8001946:	f1b8 0f00 	cmp.w	r8, #0
 800194a:	f000 80b7 	beq.w	8001abc <HAL_SPI_Transmit+0x1a6>
 800194e:	f1b9 0f00 	cmp.w	r9, #0
 8001952:	f000 80b3 	beq.w	8001abc <HAL_SPI_Transmit+0x1a6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001956:	2303      	movs	r3, #3
 8001958:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800195c:	2300      	movs	r3, #0
 800195e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001960:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001964:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001968:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800196c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800196e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001970:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001972:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001974:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001976:	68a3      	ldr	r3, [r4, #8]
 8001978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800197c:	d01e      	beq.n	80019bc <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001986:	d103      	bne.n	8001990 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001990:	68e3      	ldr	r3, [r4, #12]
 8001992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001996:	d01c      	beq.n	80019d2 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	b113      	cbz	r3, 80019a2 <HAL_SPI_Transmit+0x8c>
 800199c:	f1b9 0f01 	cmp.w	r9, #1
 80019a0:	d155      	bne.n	8001a4e <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019ac:	3301      	adds	r3, #1
 80019ae:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80019b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80019ba:	e048      	b.n	8001a4e <HAL_SPI_Transmit+0x138>
    __HAL_SPI_DISABLE(hspi);
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019c4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e7d5      	b.n	800197e <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019d2:	6863      	ldr	r3, [r4, #4]
 80019d4:	b113      	cbz	r3, 80019dc <HAL_SPI_Transmit+0xc6>
 80019d6:	f1b9 0f01 	cmp.w	r9, #1
 80019da:	d115      	bne.n	8001a08 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	8812      	ldrh	r2, [r2, #0]
 80019e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019e6:	3302      	adds	r3, #2
 80019e8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80019ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80019f4:	e008      	b.n	8001a08 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019f6:	f7fe ff5b 	bl	80008b0 <HAL_GetTick>
 80019fa:	1bc0      	subs	r0, r0, r7
 80019fc:	42a8      	cmp	r0, r5
 80019fe:	d302      	bcc.n	8001a06 <HAL_SPI_Transmit+0xf0>
 8001a00:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001a04:	d115      	bne.n	8001a32 <HAL_SPI_Transmit+0x11c>
 8001a06:	b1a5      	cbz	r5, 8001a32 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8001a08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03c      	beq.n	8001a8a <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	f012 0f02 	tst.w	r2, #2
 8001a18:	d0ed      	beq.n	80019f6 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a1c:	8812      	ldrh	r2, [r2, #0]
 8001a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a22:	3302      	adds	r3, #2
 8001a24:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001a30:	e7ea      	b.n	8001a08 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001a38:	2603      	movs	r6, #3
          goto error;
 8001a3a:	e03f      	b.n	8001abc <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a3c:	f7fe ff38 	bl	80008b0 <HAL_GetTick>
 8001a40:	1bc0      	subs	r0, r0, r7
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d302      	bcc.n	8001a4c <HAL_SPI_Transmit+0x136>
 8001a46:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001a4a:	d119      	bne.n	8001a80 <HAL_SPI_Transmit+0x16a>
 8001a4c:	b1c5      	cbz	r5, 8001a80 <HAL_SPI_Transmit+0x16a>
    while (hspi->TxXferCount > 0U)
 8001a4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b1d3      	cbz	r3, 8001a8a <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	f012 0f02 	tst.w	r2, #2
 8001a5c:	d0ee      	beq.n	8001a3c <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a66:	3301      	adds	r3, #1
 8001a68:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a6a:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8001a6e:	fa1f fc8c 	uxth.w	ip, ip
 8001a72:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001a76:	fa1f fc8c 	uxth.w	ip, ip
 8001a7a:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8001a7e:	e7e6      	b.n	8001a4e <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001a86:	2603      	movs	r6, #3
          goto error;
 8001a88:	e018      	b.n	8001abc <HAL_SPI_Transmit+0x1a6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a8a:	463a      	mov	r2, r7
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff fe84 	bl	800179c <SPI_EndRxTxTransaction>
 8001a94:	b108      	cbz	r0, 8001a9a <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a96:	2320      	movs	r3, #32
 8001a98:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a9a:	68a3      	ldr	r3, [r4, #8]
 8001a9c:	b933      	cbnz	r3, 8001aac <HAL_SPI_Transmit+0x196>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	9201      	str	r2, [sp, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001aae:	b92b      	cbnz	r3, 8001abc <HAL_SPI_Transmit+0x1a6>
    hspi->State = HAL_SPI_STATE_READY;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ab6:	2600      	movs	r6, #0
 8001ab8:	e000      	b.n	8001abc <HAL_SPI_Transmit+0x1a6>
    errorcode = HAL_BUSY;
 8001aba:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8001abc:	2300      	movs	r3, #0
 8001abe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	b003      	add	sp, #12
 8001ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8001aca:	2602      	movs	r6, #2
 8001acc:	e7f9      	b.n	8001ac2 <HAL_SPI_Transmit+0x1ac>

08001ace <HAL_SPI_TransmitReceive>:
{
 8001ace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	461f      	mov	r7, r3
 8001ad6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001ad8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f000 8116 	beq.w	8001d0e <HAL_SPI_TransmitReceive+0x240>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4688      	mov	r8, r1
 8001ae6:	4691      	mov	r9, r2
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001aee:	f7fe fedf 	bl	80008b0 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8001af4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001af8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001afa:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d00a      	beq.n	8001b16 <HAL_SPI_TransmitReceive+0x48>
 8001b00:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001b04:	f040 80f0 	bne.w	8001ce8 <HAL_SPI_TransmitReceive+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b08:	68a2      	ldr	r2, [r4, #8]
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	f040 80f3 	bne.w	8001cf6 <HAL_SPI_TransmitReceive+0x228>
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	f040 80f2 	bne.w	8001cfa <HAL_SPI_TransmitReceive+0x22c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b16:	f1b8 0f00 	cmp.w	r8, #0
 8001b1a:	f000 80f0 	beq.w	8001cfe <HAL_SPI_TransmitReceive+0x230>
 8001b1e:	f1b9 0f00 	cmp.w	r9, #0
 8001b22:	f000 80ee 	beq.w	8001d02 <HAL_SPI_TransmitReceive+0x234>
 8001b26:	2f00      	cmp	r7, #0
 8001b28:	f000 80ed 	beq.w	8001d06 <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b2c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d002      	beq.n	8001b3c <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b36:	2305      	movs	r3, #5
 8001b38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b40:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001b44:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b46:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b48:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b4c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001b4e:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8001b50:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b52:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b5c:	d103      	bne.n	8001b66 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b64:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b66:	68e3      	ldr	r3, [r4, #12]
 8001b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b6c:	d011      	beq.n	8001b92 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	b10b      	cbz	r3, 8001b76 <HAL_SPI_TransmitReceive+0xa8>
 8001b72:	2f01      	cmp	r7, #1
 8001b74:	d10b      	bne.n	8001b8e <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	7812      	ldrb	r2, [r2, #0]
 8001b7c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b80:	3301      	adds	r3, #1
 8001b82:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001b84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001b8e:	2701      	movs	r7, #1
 8001b90:	e06e      	b.n	8001c70 <HAL_SPI_TransmitReceive+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	b10b      	cbz	r3, 8001b9a <HAL_SPI_TransmitReceive+0xcc>
 8001b96:	2f01      	cmp	r7, #1
 8001b98:	d10b      	bne.n	8001bb2 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ba2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001ba8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001bb2:	2701      	movs	r7, #1
 8001bb4:	e01b      	b.n	8001bee <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	f012 0f01 	tst.w	r2, #1
 8001bbe:	d00e      	beq.n	8001bde <HAL_SPI_TransmitReceive+0x110>
 8001bc0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	b15a      	cbz	r2, 8001bde <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bce:	3302      	adds	r3, #2
 8001bd0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001bd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001bdc:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001bde:	f7fe fe67 	bl	80008b0 <HAL_GetTick>
 8001be2:	1b80      	subs	r0, r0, r6
 8001be4:	42a8      	cmp	r0, r5
 8001be6:	d302      	bcc.n	8001bee <HAL_SPI_TransmitReceive+0x120>
 8001be8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001bec:	d11e      	bne.n	8001c2c <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b91b      	cbnz	r3, 8001bfc <HAL_SPI_TransmitReceive+0x12e>
 8001bf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d05c      	beq.n	8001cb6 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	f012 0f02 	tst.w	r2, #2
 8001c04:	d0d7      	beq.n	8001bb6 <HAL_SPI_TransmitReceive+0xe8>
 8001c06:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d0d3      	beq.n	8001bb6 <HAL_SPI_TransmitReceive+0xe8>
 8001c0e:	2f00      	cmp	r7, #0
 8001c10:	d0d1      	beq.n	8001bb6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001c28:	2700      	movs	r7, #0
 8001c2a:	e7c4      	b.n	8001bb6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
        goto error;
 8001c34:	e059      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	f012 0f01 	tst.w	r2, #1
 8001c3e:	d00e      	beq.n	8001c5e <HAL_SPI_TransmitReceive+0x190>
 8001c40:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001c42:	b292      	uxth	r2, r2
 8001c44:	b15a      	cbz	r2, 8001c5e <HAL_SPI_TransmitReceive+0x190>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c4e:	3301      	adds	r3, #1
 8001c50:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001c52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001c5c:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c5e:	f7fe fe27 	bl	80008b0 <HAL_GetTick>
 8001c62:	1b83      	subs	r3, r0, r6
 8001c64:	42ab      	cmp	r3, r5
 8001c66:	d302      	bcc.n	8001c6e <HAL_SPI_TransmitReceive+0x1a0>
 8001c68:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c6c:	d11e      	bne.n	8001cac <HAL_SPI_TransmitReceive+0x1de>
 8001c6e:	b1ed      	cbz	r5, 8001cac <HAL_SPI_TransmitReceive+0x1de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b913      	cbnz	r3, 8001c7c <HAL_SPI_TransmitReceive+0x1ae>
 8001c76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	b1e3      	cbz	r3, 8001cb6 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	f012 0f02 	tst.w	r2, #2
 8001c84:	d0d7      	beq.n	8001c36 <HAL_SPI_TransmitReceive+0x168>
 8001c86:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d0d3      	beq.n	8001c36 <HAL_SPI_TransmitReceive+0x168>
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	d0d1      	beq.n	8001c36 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001ca8:	2700      	movs	r7, #0
 8001caa:	e7c4      	b.n	8001c36 <HAL_SPI_TransmitReceive+0x168>
        hspi->State = HAL_SPI_STATE_READY;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
        goto error;
 8001cb4:	e019      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cb6:	4632      	mov	r2, r6
 8001cb8:	4629      	mov	r1, r5
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fd6e 	bl	800179c <SPI_EndRxTxTransaction>
 8001cc0:	b970      	cbnz	r0, 8001ce0 <HAL_SPI_TransmitReceive+0x212>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cc2:	68a3      	ldr	r3, [r4, #8]
 8001cc4:	b933      	cbnz	r3, 8001cd4 <HAL_SPI_TransmitReceive+0x206>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	9201      	str	r2, [sp, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cd6:	b9c3      	cbnz	r3, 8001d0a <HAL_SPI_TransmitReceive+0x23c>
    hspi->State = HAL_SPI_STATE_READY;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8001cde:	e004      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
    goto error;
 8001ce6:	e000      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_BUSY;
 8001ce8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8001cea:	2300      	movs	r3, #0
 8001cec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	e7f7      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	e7f5      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
 8001d00:	e7f3      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
 8001d02:	2001      	movs	r0, #1
 8001d04:	e7f1      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
 8001d06:	2001      	movs	r0, #1
 8001d08:	e7ef      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	e7ed      	b.n	8001cea <HAL_SPI_TransmitReceive+0x21c>
  __HAL_LOCK(hspi);
 8001d0e:	2002      	movs	r0, #2
 8001d10:	e7ee      	b.n	8001cf0 <HAL_SPI_TransmitReceive+0x222>

08001d12 <HAL_SPI_Receive>:
{
 8001d12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d16:	b083      	sub	sp, #12
 8001d18:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d1a:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
 8001d1e:	b2f6      	uxtb	r6, r6
 8001d20:	2e01      	cmp	r6, #1
 8001d22:	f040 80ab 	bne.w	8001e7c <HAL_SPI_Receive+0x16a>
 8001d26:	4688      	mov	r8, r1
 8001d28:	4691      	mov	r9, r2
 8001d2a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d2c:	6843      	ldr	r3, [r0, #4]
 8001d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d32:	d032      	beq.n	8001d9a <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8001d34:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	f000 80a7 	beq.w	8001e8c <HAL_SPI_Receive+0x17a>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001d44:	f7fe fdb4 	bl	80008b0 <HAL_GetTick>
 8001d48:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8001d4a:	f1b8 0f00 	cmp.w	r8, #0
 8001d4e:	f000 8096 	beq.w	8001e7e <HAL_SPI_Receive+0x16c>
 8001d52:	f1b9 0f00 	cmp.w	r9, #0
 8001d56:	f000 8092 	beq.w	8001e7e <HAL_SPI_Receive+0x16c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d64:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d68:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d6c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d70:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d72:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d74:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d76:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d78:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d7a:	68a3      	ldr	r3, [r4, #8]
 8001d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d80:	d018      	beq.n	8001db4 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d8a:	d103      	bne.n	8001d94 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d92:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d94:	68e3      	ldr	r3, [r4, #12]
 8001d96:	b30b      	cbz	r3, 8001ddc <HAL_SPI_Receive+0xca>
 8001d98:	e043      	b.n	8001e22 <HAL_SPI_Receive+0x110>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d9a:	6883      	ldr	r3, [r0, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1c9      	bne.n	8001d34 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001da0:	2304      	movs	r3, #4
 8001da2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001da6:	9500      	str	r5, [sp, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	460a      	mov	r2, r1
 8001dac:	f7ff fe8f 	bl	8001ace <HAL_SPI_TransmitReceive>
 8001db0:	4606      	mov	r6, r0
 8001db2:	e067      	b.n	8001e84 <HAL_SPI_Receive+0x172>
    __HAL_SPI_DISABLE(hspi);
 8001db4:	6822      	ldr	r2, [r4, #0]
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dbc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e7db      	b.n	8001d82 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dca:	f7fe fd71 	bl	80008b0 <HAL_GetTick>
 8001dce:	1bc0      	subs	r0, r0, r7
 8001dd0:	42a8      	cmp	r0, r5
 8001dd2:	d302      	bcc.n	8001dda <HAL_SPI_Receive+0xc8>
 8001dd4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001dd8:	d115      	bne.n	8001e06 <HAL_SPI_Receive+0xf4>
 8001dda:	b1a5      	cbz	r5, 8001e06 <HAL_SPI_Receive+0xf4>
    while (hspi->RxXferCount > 0U)
 8001ddc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03c      	beq.n	8001e5e <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	f012 0f01 	tst.w	r2, #1
 8001dec:	d0ed      	beq.n	8001dca <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001dee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001df0:	7b1b      	ldrb	r3, [r3, #12]
 8001df2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001df6:	3301      	adds	r3, #1
 8001df8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001dfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001e04:	e7ea      	b.n	8001ddc <HAL_SPI_Receive+0xca>
          hspi->State = HAL_SPI_STATE_READY;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001e0c:	2603      	movs	r6, #3
          goto error;
 8001e0e:	e036      	b.n	8001e7e <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e10:	f7fe fd4e 	bl	80008b0 <HAL_GetTick>
 8001e14:	1bc0      	subs	r0, r0, r7
 8001e16:	42a8      	cmp	r0, r5
 8001e18:	d302      	bcc.n	8001e20 <HAL_SPI_Receive+0x10e>
 8001e1a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001e1e:	d119      	bne.n	8001e54 <HAL_SPI_Receive+0x142>
 8001e20:	b1c5      	cbz	r5, 8001e54 <HAL_SPI_Receive+0x142>
    while (hspi->RxXferCount > 0U)
 8001e22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b1d3      	cbz	r3, 8001e5e <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	f012 0f01 	tst.w	r2, #1
 8001e30:	d0ee      	beq.n	8001e10 <HAL_SPI_Receive+0xfe>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001e3e:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8001e42:	fa1f fc8c 	uxth.w	ip, ip
 8001e46:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001e4a:	fa1f fc8c 	uxth.w	ip, ip
 8001e4e:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8001e52:	e7e6      	b.n	8001e22 <HAL_SPI_Receive+0x110>
          hspi->State = HAL_SPI_STATE_READY;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8001e5a:	2603      	movs	r6, #3
          goto error;
 8001e5c:	e00f      	b.n	8001e7e <HAL_SPI_Receive+0x16c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e5e:	463a      	mov	r2, r7
 8001e60:	4629      	mov	r1, r5
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fcac 	bl	80017c0 <SPI_EndRxTransaction>
 8001e68:	b108      	cbz	r0, 8001e6e <HAL_SPI_Receive+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e70:	b92b      	cbnz	r3, 8001e7e <HAL_SPI_Receive+0x16c>
    hspi->State = HAL_SPI_STATE_READY;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e78:	2600      	movs	r6, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_SPI_Receive+0x16c>
    errorcode = HAL_BUSY;
 8001e7c:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e84:	4630      	mov	r0, r6
 8001e86:	b003      	add	sp, #12
 8001e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8001e8c:	2602      	movs	r6, #2
 8001e8e:	e7f9      	b.n	8001e84 <HAL_SPI_Receive+0x172>

08001e90 <memset>:
 8001e90:	4603      	mov	r3, r0
 8001e92:	4402      	add	r2, r0
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d100      	bne.n	8001e9a <memset+0xa>
 8001e98:	4770      	bx	lr
 8001e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9e:	e7f9      	b.n	8001e94 <memset+0x4>

08001ea0 <__libc_init_array>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	4d0c      	ldr	r5, [pc, #48]	; (8001ed8 <__libc_init_array+0x38>)
 8001ea6:	4c0d      	ldr	r4, [pc, #52]	; (8001edc <__libc_init_array+0x3c>)
 8001ea8:	1b64      	subs	r4, r4, r5
 8001eaa:	10a4      	asrs	r4, r4, #2
 8001eac:	42a6      	cmp	r6, r4
 8001eae:	d109      	bne.n	8001ec4 <__libc_init_array+0x24>
 8001eb0:	f000 f81a 	bl	8001ee8 <_init>
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	4d0a      	ldr	r5, [pc, #40]	; (8001ee0 <__libc_init_array+0x40>)
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ee4 <__libc_init_array+0x44>)
 8001eba:	1b64      	subs	r4, r4, r5
 8001ebc:	10a4      	asrs	r4, r4, #2
 8001ebe:	42a6      	cmp	r6, r4
 8001ec0:	d105      	bne.n	8001ece <__libc_init_array+0x2e>
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec8:	4798      	blx	r3
 8001eca:	3601      	adds	r6, #1
 8001ecc:	e7ee      	b.n	8001eac <__libc_init_array+0xc>
 8001ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed2:	4798      	blx	r3
 8001ed4:	3601      	adds	r6, #1
 8001ed6:	e7f2      	b.n	8001ebe <__libc_init_array+0x1e>
 8001ed8:	08001f24 	.word	0x08001f24
 8001edc:	08001f24 	.word	0x08001f24
 8001ee0:	08001f24 	.word	0x08001f24
 8001ee4:	08001f28 	.word	0x08001f28

08001ee8 <_init>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	bf00      	nop
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr

08001ef4 <_fini>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr
